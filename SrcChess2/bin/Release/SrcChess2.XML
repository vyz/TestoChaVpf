<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SrcChess2</name>
    </assembly>
    <members>
        <member name="T:SrcChess2.PgnParserException">
            <summary>Parser exception</summary>
        </member>
        <member name="F:SrcChess2.PgnParserException.CodeInError">
            <summary>Code which is in error</summary>
        </member>
        <member name="F:SrcChess2.PgnParserException.MoveList">
            <summary>Array of move position</summary>
        </member>
        <member name="M:SrcChess2.PgnParserException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="strMsg">           Error Message</param>
            <param name="strCodeInError">   Code in error</param>
            <param name="ex">               Inner exception</param>
        </member>
        <member name="M:SrcChess2.PgnParserException.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strMsg">           Error Message</param>
            <param name="strCodeInError">   Code in error</param>
        </member>
        <member name="M:SrcChess2.PgnParserException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="strMsg">           Error Message</param>
        </member>
        <member name="M:SrcChess2.PgnParserException.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SrcChess2.PgnParserException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Unserialize additional data
            </summary>
            <param name="info">     Serialization Info</param>
            <param name="context">  Context Info</param>
        </member>
        <member name="M:SrcChess2.PgnParserException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize the additional data
            </summary>
            <param name="info">     Serialization Info</param>
            <param name="context">  Context Info</param>
        </member>
        <member name="T:SrcChess2.PgnParser">
            <summary>Class implementing the parsing of a PGN file. PGN is a standard way of recording chess games.</summary>
        </member>
        <member name="F:SrcChess2.PgnParser.m_strText">
            <summary>Text to parse</summary>
        </member>
        <member name="F:SrcChess2.PgnParser.m_iStartPos">
            <summary>Starting position of a game</summary>
        </member>
        <member name="F:SrcChess2.PgnParser.m_iPos">
            <summary>Current position in text</summary>
        </member>
        <member name="F:SrcChess2.PgnParser.m_iSize">
            <summary>Size of the text</summary>
        </member>
        <member name="F:SrcChess2.PgnParser.m_chessBoard">
            <summary>Board use to play as we decode</summary>
        </member>
        <member name="F:SrcChess2.PgnParser.m_bDiagnose">
            <summary>true to diagnose the parser. This generate exception when a move cannot be resolved</summary>
        </member>
        <member name="M:SrcChess2.PgnParser.#ctor(System.Boolean)">
            <summary>
            Class Ctor
            </summary>
            <param name="bDiagnose">    true to diagnose the parser</param>
        </member>
        <member name="M:SrcChess2.PgnParser.GetCodeInError">
            <summary>
            Return the code of the current game
            </summary>
            <returns>
            Current game
            </returns>
        </member>
        <member name="M:SrcChess2.PgnParser.PeekChr">
            <summary>
            Peek the next character
            </summary>
            <returns>
            Character
            </returns>
        </member>
        <member name="M:SrcChess2.PgnParser.GetChr">
            <summary>
            Gets the next character
            </summary>
            <returns>
            Character
            </returns>
        </member>
        <member name="M:SrcChess2.PgnParser.SkipSpace">
            <summary>
            Skip whitespace
            </summary>
        </member>
        <member name="M:SrcChess2.PgnParser.SkipAltMoveAndRemark">
            <summary>
            Skip a remark (...)
            </summary>
        </member>
        <member name="M:SrcChess2.PgnParser.DecodeMove(System.String,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Decode a move
            </summary>
            <param name="strPos">       Position</param>
            <param name="iStartCol">    Returns the starting column found in move if specified (-1 if not)</param>
            <param name="iStartRow">    Returns the starting row found in move if specified (-1 if not)</param>
            <param name="iEndPos">      Returns the ending position of the move</param>
        </member>
        <member name="M:SrcChess2.PgnParser.FindCastling(SrcChess2.ChessBoard.PlayerColorE,System.Boolean,System.Int32@,System.String,SrcChess2.ChessBoard.MovePosS@)">
            <summary>
            Find a castle move
            </summary>
            <param name="ePlayerColor">     Color moving</param>
            <param name="bShortCastling">   true for short, false for long</param>
            <param name="iTruncated">       Truncated count</param>
            <param name="strMove">          Move</param>
            <param name="movePos">          Returned moved if found</param>
            <returns>
            Moving position or -1 if error
            </returns>
        </member>
        <member name="M:SrcChess2.PgnParser.FindPieceMove(SrcChess2.ChessBoard.PlayerColorE,SrcChess2.ChessBoard.PieceE,System.Int32,System.Int32,System.Int32,SrcChess2.ChessBoard.MoveTypeE,System.String,System.Int32@,SrcChess2.ChessBoard.MovePosS@)">
            <summary>
            Find a move using the specification
            </summary>
            <param name="ePlayerColor">     Color moving</param>
            <param name="ePiece">           Piece moving</param>
            <param name="iStartCol">        Starting column of the move or -1 if not specified</param>
            <param name="iStartRow">        Starting row of the move or -1 if not specified</param>
            <param name="iEndPos">          Ending position of the move</param>
            <param name="eMoveType">        Type of move. Use for discriminating between different pawn promotion.</param>
            <param name="strMove">          Move</param>
            <param name="iTruncated">       Truncated count</param>
            <param name="movePos">          Move position</param>
            <returns>
            Moving position or -1 if error
            </returns>
        </member>
        <member name="M:SrcChess2.PgnParser.CnvRawMoveToPosMove(SrcChess2.ChessBoard.PlayerColorE,System.String,System.Int32@,System.Int32@,SrcChess2.ChessBoard.MovePosS@)">
            <summary>
            Convert a PGN position into a moving position
            </summary>
            <param name="ePlayerColor">     Color moving</param>
            <param name="strMove">          Move</param>
            <param name="iPos">             Returned moving position</param>
            <param name="iTruncated">       Truncated count</param>
            <param name="movePos">          Move position</param>
        </member>
        <member name="M:SrcChess2.PgnParser.CnvRawMoveToPosMove(SrcChess2.ChessBoard.PlayerColorE,System.Collections.Generic.List{System.String},System.Int32[]@,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS},System.Int32@,System.Int32@)">
            <summary>
            Convert a list of PGN positions into a moving positions
            </summary>
            <param name="eColorToPlay">     Color to play</param>
            <param name="arrRawMove">       Array of PGN moves</param>
            <param name="piMoveList">       Returned array of moving position</param>
            <param name="listMovePos">      Returned the list of move if not null</param>
            <param name="iSkip">            Skipped count</param>
            <param name="iTruncated">       Truncated count</param>
        </member>
        <member name="M:SrcChess2.PgnParser.ParseAttr(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Parse an attribute [Name "Value"]
            </summary>
            <param name="dict">             Dictionary where to append the attribute</param>
        </member>
        <member name="M:SrcChess2.PgnParser.ParseRawMove(System.Int32,System.String@)">
            <summary>
            Parse a single PGN move
            </summary>
            <param name="iMoveIndex">       Index of the current move</param>
            <param name="strMove">          Returned PGN move</param>
            <returns>
            true if succeed, false if failed
            </returns>
        </member>
        <member name="M:SrcChess2.PgnParser.ParseFEN(System.String,SrcChess2.ChessBoard.PlayerColorE@,SrcChess2.ChessBoard.BoardStateMaskE@,System.Int32@)">
            <summary>
            Parse FEN definition into a board representation
            </summary>
            <param name="strFEN">           FEN</param>
            <param name="eColorToMove">     Return the color to move</param>
            <param name="eBoardStateMask">  Return the mask of castling info</param>
            <param name="iEnPassant">       Return the en passant position or 0 if none</param>
            <returns>
            true if succeed, false if failed
            </returns>
        </member>
        <member name="M:SrcChess2.PgnParser.ParseNextMoveList(System.Boolean,System.Int32[]@,System.Collections.Generic.Dictionary{System.String,System.String}@,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS},System.Int32@,System.Int32@,SrcChess2.ChessBoard@,SrcChess2.ChessBoard.PlayerColorE@,System.String@,System.String@,SrcChess2.PgnParser.PlayerTypeE@,SrcChess2.PgnParser.PlayerTypeE@,System.TimeSpan@,System.TimeSpan@)">
             <summary>
             Parse one game in PGN
             </summary>
             <param name="bIgnoreMoveListIfFEN"> Ignore the move list if FEN is found</param>
             <param name="piMoveList">           Returned move list</param>
             <param name="attrs">                Returned list of attributes for this game</param>
             <param name="listMovePos">          Returned the list of move if not null</param>
             <param name="iSkip">                Number of games skipped</param>
             <param name="iTruncated">           Number of games truncated</param>
             <param name="chessBoardStarting">   Starting board setting. If null, standard board used.</param>
             <param name="eStartingColor">       Starting color</param>
             <param name="strWhitePlayerName">   White pieces player name</param>
             <param name="strBlackPlayerName">   Black pieces player name</param>
             <param name="eWhitePlayerType">     White pieces player type</param>
             <param name="eBlackPlayerType">     Black pieces player type</param>
             <param name="spanWhitePlayer">      Time span for white player</param>
             <param name="spanBlackPlayer">      Time span for black player</param>
             <returns>
             false if invalid board
             </returns>
             <remarks>
             
             The parser understand an extended version of the [TimeControl] tag:
             
                 [TimeControl "?:123:456"]   where 123 = white tick count, 456 = black tick count (100 nano-sec unit)
            
             The parser also understand the following standard tags:
             
                 [White] [Black] [FEN] [WhiteType] [BlackType]
             
             </remarks>
        </member>
        <member name="M:SrcChess2.PgnParser.Parse(System.String,System.Collections.Generic.List{System.Int32[]},System.Int32@,System.Int32@)">
            <summary>
            Parse a PGN text file
            </summary>
            <param name="strText">          PGN Text</param>
            <param name="arrMoveList">      Move list array to fill</param>
            <param name="iSkip">            Number of games skipped</param>
            <param name="iTruncated">       Number of games truncated</param>
        </member>
        <member name="M:SrcChess2.PgnParser.ParseSingle(System.String,System.Boolean,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS},System.Int32@,System.Int32@,SrcChess2.ChessBoard@,SrcChess2.ChessBoard.PlayerColorE@,System.String@,System.String@,SrcChess2.PgnParser.PlayerTypeE@,SrcChess2.PgnParser.PlayerTypeE@,System.TimeSpan@,System.TimeSpan@)">
            <summary>
            Parse a single PGN game
            </summary>
            <param name="strText">              PGN Text</param>
            <param name="bIgnoreMoveListIfFEN"> Ignore the move list if FEN is found</param>
            <param name="listMovePos">          Returned the list of move if not null</param>
            <param name="iSkip">                Number of games skipped</param>
            <param name="iTruncated">           Number of games truncated</param>
            <param name="chessBoardStarting">   Starting board setting. If null, standard board used.</param>
            <param name="eStartingColor">       Starting color</param>
            <param name="strWhitePlayerName">   White pieces player name</param>
            <param name="strBlackPlayerName">   Black pieces player name</param>
            <param name="eWhitePlayerType">     White pieces player type</param>
            <param name="eBlackPlayerType">     Black pieces player type</param>
            <param name="spanWhitePlayer">      Time span for white player</param>
            <param name="spanBlackPlayer">      Time span for black player</param>
            <returns>
            false if the board specified by FEN is invalid.
            </returns>
        </member>
        <member name="T:SrcChess2.PgnParser.PlayerTypeE">
            <summary>Type of player (human of computer program)</summary>
        </member>
        <member name="F:SrcChess2.PgnParser.PlayerTypeE.Human">
            <summary>Player is a human</summary>
        </member>
        <member name="F:SrcChess2.PgnParser.PlayerTypeE.Program">
            <summary>Player is a computer program</summary>
        </member>
        <member name="T:SrcChess2.frmPgnGamePicker">
            <summary>
            Interaction logic for frmPgnGamePicker.xaml
            </summary>
            <summary>
            frmPgnGamePicker
            </summary>
        </member>
        <member name="F:SrcChess2.frmPgnGamePicker.m_pgnUtil">
            <summary>Utility class</summary>
        </member>
        <member name="F:SrcChess2.frmPgnGamePicker.m_streamInp">
            <summary>Input stream</summary>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.GetSelectedGame">
            <summary>
            Get the selected game content
            </summary>
            <returns>
            Game or null if none selected
            </returns>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.RefreshGameDisplay">
            <summary>
            Refresh the textbox containing the selected game content
            </summary>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.InitForm(System.String)">
            <summary>
            Initialize the form with the content of the PGN file
            </summary>
            <param name="strFileName">  PGN file name</param>
            <returns>
            true if at least one game has been found.
            </returns>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.Button_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Accept the content of the form
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.Button_Click_1(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Accept the content of the form (but no move)
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.listBoxGames_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Called when the game selection is changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnGamePicker.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.MoveList">
            <summary>List of moves for the current game</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.SelectedGame">
            <summary>Selected game</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.StartingChessBoard">
            <summary>Starting board. Null if standard board</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.StartingColor">
            <summary>Starting color</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.WhitePlayerName">
            <summary>White Player Name</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.BlackPlayerName">
            <summary>Black Player Name</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.WhitePlayerType">
            <summary>White Player Type</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.BlackPlayerType">
            <summary>Black Player Type</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.WhiteTimer">
            <summary>White Timer</summary>
        </member>
        <member name="P:SrcChess2.frmPgnGamePicker.BlackTimer">
            <summary>Black Timer</summary>
        </member>
        <member name="T:SrcChess2.frmPgnFilter">
            <summary>
            Interaction logic for frmPgnFilter.xaml
            </summary>
            <summary>
            frmPgnFilter
            </summary>
        </member>
        <member name="F:SrcChess2.frmPgnFilter.m_filterClause">
            <summary>Clause use to filter PGN games</summary>
        </member>
        <member name="F:SrcChess2.frmPgnFilter.m_pgnUtil">
            <summary>PGN utility class</summary>
        </member>
        <member name="F:SrcChess2.frmPgnFilter.m_streamInp">
            <summary>Input Stream</summary>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.#ctor(SrcChess2.PgnUtil,System.IO.Stream,System.Int32,System.Int32,System.String[],System.String,System.Int32)">
            <summary>
            Class constructor
            </summary>
            <param name="pgnUtil">          PGN utility class</param>
            <param name="streamInp">        Input stream containing the PGN file</param>
            <param name="iMinELO">          Minimum ELO in the PGN file</param>
            <param name="iMaxELO">          Maximum ELO in the PGN file</param>
            <param name="arrPlayers">       List of players found in the PGN file</param>
            <param name="strInpFileName">   Name of the input file.</param>
            <param name="iGameCount">       Number of games in the PGN file</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.CheckAllItems(System.Windows.Controls.ListBox,System.Boolean)">
            <summary>
            Checks or unchecks all items in a checked list control
            </summary>
            <param name="listBox">      Control</param>
            <param name="bChecked">     true to check, false to uncheck</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.GetCheckedCount(System.Windows.Controls.ListBox)">
            <summary>
            Gets the number of checked item
            </summary>
            <param name="listBox">      Control</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.SyncInfo">
            <summary>
            Gets and validates information coming from the user
            </summary>
            <returns>
            true if validation is ok, false if not
            </returns>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Ok button is clicked
            </summary>
            <param name="sender">           Sender object</param>
            <param name="e">                Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.butTest_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Ok button is clicked
            </summary>
            <param name="sender">           Sender object</param>
            <param name="e">                Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.butSelectAllRange_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the button is clicked
            </summary>
            <param name="sender">           Sender object</param>
            <param name="e">                Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.butClearAllRange_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the button is clicked
            </summary>
            <param name="sender">           Sender object</param>
            <param name="e">                Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.butSelectAllPlayers_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the button is clicked
            </summary>
            <param name="sender">           Sender object</param>
            <param name="e">                Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.butClearAllPlayers_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the button is clicked
            </summary>
            <param name="sender">           Sender object</param>
            <param name="e">                Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.butSelectAllEndGame_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the button is clicked
            </summary>
            <param name="sender">           Sender object</param>
            <param name="e">                Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.butClearAllEndGame_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the button is clicked
            </summary>
            <param name="sender">           Sender object</param>
            <param name="e">                Event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllRanges_CheckedChanged">
            <summary>
            Called when the button is clicked
            </summary>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllPlayer_CheckedChanged">
            <summary>
            Called when the button is clicked
            </summary>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllEndGame_CheckedChanged">
            <summary>
            Called when the button is clicked
            </summary>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllRanges_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the All Range checkbox is checked
            </summary>
            <param name="sender">   sender object</param>
            <param name="e">        event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllRanges_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the All Ranges checkbox is unchecked
            </summary>
            <param name="sender">   sender object</param>
            <param name="e">        event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllPlayer_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the All Players checkbox is checked
            </summary>
            <param name="sender">   sender object</param>
            <param name="e">        event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllPlayer_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the All Players checkbox is unchecked
            </summary>
            <param name="sender">   sender object</param>
            <param name="e">        event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllEndGame_Checked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the All End Games checkbox is checked
            </summary>
            <param name="sender">   sender object</param>
            <param name="e">        event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.checkBoxAllEndGame_Unchecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the All End Games checkbox is unchecked
            </summary>
            <param name="sender">   sender object</param>
            <param name="e">        event argument</param>
        </member>
        <member name="M:SrcChess2.frmPgnFilter.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:SrcChess2.frmPgnFilter.FilteringClause">
            <summary>
            Clause use to filter the PGN file has defined by the user. Valid after the Ok button has been clicked.
            </summary>
        </member>
        <member name="T:SrcChess2.frmPgnFilter.RangeItem">
            <summary>Represent an ELO range in the checked list control</summary>
        </member>
        <member name="T:SrcChess2.frmGameParameter">
            <summary>
            Pickup Game Parameter from the player
            </summary>
            <summary>
            frmGameParameter
            </summary>
        </member>
        <member name="M:SrcChess2.frmGameParameter.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmGameParameter.#ctor(SrcChess2.MainWindow)">
            <summary>
            Default constructor
            </summary>
            <param name="father">       Father Window</param>
        </member>
        <member name="M:SrcChess2.frmGameParameter.CheckState">
            <summary>
            Check the state of the group box
            </summary>
        </member>
        <member name="M:SrcChess2.frmGameParameter.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called to accept the form
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.frmGameParameter.radioButtonOpponent_CheckedChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the radio button value is changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.frmGameParameter.AskGameParameter(SrcChess2.MainWindow)">
            <summary>
            Ask for the game parameter
            </summary>
            <param name="father">   Father window</param>
            <returns>
            true if succeed
            </returns>
        </member>
        <member name="M:SrcChess2.frmGameParameter.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:SrcChess2.frmGameParameter.Father">
            <summary>Father Window</summary>
        </member>
        <member name="T:SrcChess2.frmBoardSetting">
            <summary>Pickup the colors use to draw the chess control</summary>
            <summary>
            frmBoardSetting
            </summary>
        </member>
        <member name="F:SrcChess2.frmBoardSetting.m_listPieceSet">
            <summary>List of Piece Sets</summary>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.#ctor(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Collections.Generic.SortedList{System.String,SrcChess2.PieceSet},SrcChess2.PieceSet)">
            <summary>
            Class constructor
            </summary>
            <param name="colorLiteCell">    Lite Cells Color</param>
            <param name="colorDarkCell">    Dark Cells Color</param>
            <param name="colorWhitePiece">  White Pieces Color</param>
            <param name="colorBlackPiece">  Black Pieces Color</param>
            <param name="backGroundColor">  Main window background color</param>
            <param name="listPieceSet">     List of Piece Sets</param>
            <param name="pieceSet">         Current Piece Set</param>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.frmBoardSetting_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the form is loaded
            </summary>
            <param name="sender">   Sender Object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.customColorPickerDark_SelectedColorChanged(System.Windows.Media.Color)">
            <summary>
            Called when the dark cell color is changed
            </summary>
            <param name="color">    Color</param>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.customColorPickerLite_SelectedColorChanged(System.Windows.Media.Color)">
            <summary>
            Called when the lite cell color is changed
            </summary>
            <param name="color">    Color</param>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.customColorBackground_SelectedColorChanged(System.Windows.Media.Color)">
            <summary>
            Called when the background color is changed
            </summary>
            <param name="color">    Color</param>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.FillPieceSet">
            <summary>
            Fill the combo box with the list of piece sets
            </summary>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.butResetToDefault_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the reset to default button is pressed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event handler</param>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.comboBoxPieceSet_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Called when the PieceSet is changed
            </summary>
            <param name="sender">   Sender Object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Ok button is clicked
            </summary>
            <param name="sender">   Sender Object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.frmBoardSetting.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:SrcChess2.frmBoardSetting.LiteCellColor">
            <summary>Lite Cell Color</summary>
        </member>
        <member name="P:SrcChess2.frmBoardSetting.DarkCellColor">
            <summary>Dark Cell Color</summary>
        </member>
        <member name="P:SrcChess2.frmBoardSetting.WhitePieceColor">
            <summary>White Piece Color</summary>
        </member>
        <member name="P:SrcChess2.frmBoardSetting.BlackPieceColor">
            <summary>Black Piece Color</summary>
        </member>
        <member name="P:SrcChess2.frmBoardSetting.BackgroundColor">
            <summary>Background Color</summary>
        </member>
        <member name="P:SrcChess2.frmBoardSetting.PieceSet">
            <summary>Selected PieceSet</summary>
        </member>
        <member name="T:SrcChess2.MoveHistory">
             <summary>
             Maintains a move history to handle the fifty-move rule and the threefold repetition rule.
             
             For the first rules, we just maintains one move count per series of move which doesn't eat a piece or move a pawn.
             For the second rules, we use two strategies, a fast but unreliable one and a second slower but exact.
            
                 A.  Use two 16KB table of counter address by table[Zobrist key of the board mod 16KB]. Collision can occurs so its
                     only a good indication that the board can be there more than 2 times.
                 B.  Keep a compressed representation of the board in an array to be able to count the number of identical boards.
             
             </summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.IMax50CounterDepth">
            <summary>
            Each pawn can move a maximum of 6 times, there is 31 pieces which can be eaten. So no more than
            127 times the AddCurrentMove can be called with bPawnMoveOrPieceEaten set without undo being done on it</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.m_packedBoardCurrent">
            <summary>Current packed board representation</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.m_iMoveCount">
            <summary>Number of moves in the history</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.m_iPackedBoardArraySize">
            <summary>Size of the packed board array</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.m_arrPackedBoard">
            <summary>Array of packed boards</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.m_arrHashCount">
            <summary>Array of byte containing the count of each board identified by a Zobrist key.</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.m_iCountMoveDepth">
            <summary>Depth of current count move. Up to IMax50CounterDepth - 1</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.m_arrCountMove">
            <summary>Array of count move</summary>
        </member>
        <member name="M:SrcChess2.MoveHistory.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:SrcChess2.MoveHistory.#ctor(SrcChess2.MoveHistory)">
            <summary>
            Copy constructor
            </summary>
            <param name="moveHistory">  MoveHistory template</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.Clone">
            <summary>
            Creates a clone of the MoveHistory
            </summary>
            <returns>
            A new clone of the MoveHistory
            </returns>
        </member>
        <member name="M:SrcChess2.MoveHistory.LoadFromStream(System.IO.BinaryReader)">
            <summary>
            Load from stream
            </summary>
            <param name="reader">   Binary reader</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.SaveToStream(System.IO.BinaryWriter)">
            <summary>
            Save to stream
            </summary>
            <param name="writer">   Binary writer</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.IsTwoBoardEqual(SrcChess2.MoveHistory.PackedBoard,SrcChess2.MoveHistory.PackedBoard)">
            <summary>
            Determine if two boards are equal
            </summary>
            <param name="board1">   First board</param>
            <param name="board2">   Second board</param>
            <returns>
            true if equal, false if not
            </returns>
        </member>
        <member name="M:SrcChess2.MoveHistory.GetBoardCount(SrcChess2.MoveHistory.PackedBoard)">
            <summary>
            Gets the number of time this board is in the history (for the same color)
            </summary>
            <param name="board">    Board</param>
            <returns>
            Count
            </returns>
        </member>
        <member name="M:SrcChess2.MoveHistory.AddCurrentPackedBoard(System.Int64,System.Boolean)">
            <summary>
            Add the current packed board to the history
            </summary>
            <param name="l64ZobristKey">            Zobrist key of the board</param>
            <param name="bPawnMoveOrPieceEaten">    true if a pawn has moved or a piece has been eaten</param>
            <returns>
            Result: NoRepeat, ThreeFoldRepeat or FiftyRuleRepeat
            </returns>
        </member>
        <member name="M:SrcChess2.MoveHistory.GetCurrentBoardCount(System.Int64)">
            <summary>
            Get the current packed board count
            </summary>
            <returns>
            Count
            </returns>
        </member>
        <member name="M:SrcChess2.MoveHistory.RemoveLastMove(System.Int64)">
            <summary>
            Remove the last move from the history
            </summary>
            <param name="l64ZobristKey">    Zobrist key of the board</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.ComputePackedValue(SrcChess2.ChessBoard.PieceE[],System.Int32)">
            <summary>
            Compute a packed value of 16 pieces
            </summary>
            <param name="peBoard">              Board array</param>
            <param name="iStartPos">            Pieces starting position</param>
            <returns>
            Packed value of the 16 pieces
            </returns>
        </member>
        <member name="M:SrcChess2.MoveHistory.ComputePackedBoard(SrcChess2.ChessBoard.PieceE[],SrcChess2.ChessBoard.BoardStateMaskE)">
            <summary>
            Compute the packed representation of a board
            </summary>
            <param name="peBoard">              Board array</param>
            <param name="eInfo">                Board extra info</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.ComputeCurrentPackedBoard(SrcChess2.ChessBoard.PieceE[],SrcChess2.ChessBoard.BoardStateMaskE)">
            <summary>
            Compute the current packed representation of a board
            </summary>
            <param name="peBoard">              Board array</param>
            <param name="eInfo">                Board extra info</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.UnpackBoardValue(System.Int64,SrcChess2.ChessBoard.PieceE[],System.Int32)">
            <summary>
            Unpack a packed board value to a board
            </summary>
            <param name="lVal">                 Packed board value</param>
            <param name="peBoard">              Board array</param>
            <param name="iStartPos">            Offset in the board</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.UnpackBoard(SrcChess2.MoveHistory.PackedBoard,SrcChess2.ChessBoard.PieceE[])">
            <summary>
            Unpack a packed board to a board
            </summary>
            <param name="packedBoard">          Packed board</param>
            <param name="peBoard">              Board array</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.Reset(SrcChess2.ChessBoard.PieceE[],SrcChess2.ChessBoard.BoardStateMaskE)">
            <summary>
            Reset the move history
            </summary>
            <param name="peBoard">              Board array</param>
            <param name="eInfo">                Board extra info</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.UpdateCurrentPackedBoard(System.Int32,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Update the current board packing
            </summary>
            <param name="iPos">                 Position of the new piece</param>
            <param name="eNewPiece">            New piece</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.UpdateCurrentPackedBoard(SrcChess2.ChessBoard.BoardStateMaskE)">
            <summary>
            Update the current board packing
            </summary>
            <param name="eInfo">        Board extra info</param>
        </member>
        <member name="T:SrcChess2.MoveHistory.PackedBoard">
            <summary>
            Packed representation of a board. Each long contains 16 pieces (2 per bytes)
            </summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.PackedBoard.m_lVal1">
            <summary>Pieces from square 0-15</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.PackedBoard.m_lVal2">
            <summary>Pieces from square 16-31</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.PackedBoard.m_lVal3">
            <summary>Pieces from square 32-47</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.PackedBoard.m_lVal4">
            <summary>Pieces from square 48-63</summary>
        </member>
        <member name="F:SrcChess2.MoveHistory.PackedBoard.m_eInfo">
            <summary>Additional board info</summary>
        </member>
        <member name="M:SrcChess2.MoveHistory.PackedBoard.SaveToStream(System.IO.BinaryWriter)">
            <summary>
            Save the structure in a binary writer
            </summary>
            <param name="writer">   Binary writer</param>
        </member>
        <member name="M:SrcChess2.MoveHistory.PackedBoard.LoadFromStream(System.IO.BinaryReader)">
            <summary>
            Load the structure from a binary reader
            </summary>
            <param name="reader">   Binary reader</param>
        </member>
        <member name="T:SrcChess2.LostPiecesControl">
            <summary>
            Show a list of lost pieces
            </summary>
            <summary>
            LostPiecesControl
            </summary>
        </member>
        <member name="F:SrcChess2.LostPiecesControl.m_arrBorder">
            <summary>Array of frame containing the piece visual</summary>
        </member>
        <member name="F:SrcChess2.LostPiecesControl.m_arrPiece">
            <summary>Array containining the pieces</summary>
        </member>
        <member name="F:SrcChess2.LostPiecesControl.m_chessBoardCtl">
            <summary>Chess Board Control</summary>
        </member>
        <member name="F:SrcChess2.LostPiecesControl.m_pieceSet">
            <summary>Piece Set to use to show the pieces</summary>
        </member>
        <member name="F:SrcChess2.LostPiecesControl.m_bDesignMode">
            <summary>true if in design mode. In design mode, One of each possible pieces is shown and one can be selected.</summary>
        </member>
        <member name="F:SrcChess2.LostPiecesControl.m_iSelectedPiece">
            <summary>Piece currently selected in design mode.</summary>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.EnumPiece">
            <summary>
            Enumerate the pieces which must be shown in the control
            </summary>
            <returns>
            Array of pieces
            </returns>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.MakeSquare(System.Windows.Size)">
            <summary>
            Make the grid square
            </summary>
            <param name="size"> User control size</param>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.MeasureOverride(System.Windows.Size)">
            <summary>
            Called when the Measure() method is called
            </summary>
            <param name="constraint">   Size constraint</param>
            <returns>
            Control size
            </returns>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.SetPieceControl(System.Int32,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Set the chess piece control
            </summary>
            <param name="iPos">         Piece position</param>
            <param name="ePiece">       Piece</param>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.RefreshCell(SrcChess2.ChessBoard.PieceE[],System.Int32,System.Boolean)">
            <summary>
            Refresh the specified cell
            </summary>
            <param name="arrNewPieces"> New pieces value</param>
            <param name="iPos">         Piece position</param>
            <param name="bFullRefresh"> true to refresh even if its the same piece</param>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.Refresh(System.Boolean)">
            <summary>
            Refresh the board
            </summary>
            <param name="bFullRefresh"> Refresh even if its the same piece</param>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.Refresh">
            <summary>
            Refresh the board
            </summary>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when one of the mouse button is release
            </summary>
            <param name="e">        Event</param>
        </member>
        <member name="M:SrcChess2.LostPiecesControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:SrcChess2.LostPiecesControl.Color">
            <summary>Color being displayed. false = White, true = Black</summary>
        </member>
        <member name="P:SrcChess2.LostPiecesControl.ChessBoardControl">
            <summary>
            Chess Board Control associate with this control
            </summary>
        </member>
        <member name="P:SrcChess2.LostPiecesControl.PieceSet">
            <summary>
            Piece Set use to draw the visual pieces
            </summary>
        </member>
        <member name="P:SrcChess2.LostPiecesControl.SelectedIndex">
            <summary>
            Select a piece (in design mode only)
            </summary>
        </member>
        <member name="P:SrcChess2.LostPiecesControl.SelectedPiece">
            <summary>
            Gets the currently selected piece
            </summary>
        </member>
        <member name="P:SrcChess2.LostPiecesControl.BoardDesignMode">
            <summary>
            Select the design mode
            </summary>
        </member>
        <member name="T:SrcChess2.LocalChessBoardControl">
            <summary>
            Override chess control to add information to the save board
            </summary>
        </member>
        <member name="T:SrcChess2.ChessBoardControl">
            <summary>
            Defines a Chess Board Control
            </summary>
            <summary>
            ChessBoardControl
            </summary>
        </member>
        <member name="T:SrcChess2.SearchEngine.ITrace">
            <summary>Interface to implement to do a search</summary>
        </member>
        <member name="T:SrcChess2.SearchEngine">
            <summary>Base class for Search Engine</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.m_bCancelSearch">
            <summary>true to cancel the search</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.m_trace">
            <summary>Object where to redirect the trace if any</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.m_rnd">
            <summary>Random number generator</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.m_rndRep">
            <summary>Random number generator (repetitive, seed = 0)</summary>
        </member>
        <member name="M:SrcChess2.SearchEngine.#ctor(SrcChess2.SearchEngine.ITrace,System.Random,System.Random)">
            <summary>
            Class constructor
            </summary>
            <param name="trace">    Trace object or null</param>
            <param name="rnd">      Random object</param>
            <param name="rndRep">   Repetitive random object</param>
        </member>
        <member name="M:SrcChess2.SearchEngine.TraceSearch(System.Int32,SrcChess2.ChessBoard.PlayerColorE,SrcChess2.ChessBoard.MovePosS,System.Int32)">
            <summary>
            Debugging routine
            </summary>
            <param name="iDepth">       Actual search depth</param>
            <param name="ePlayerColor"> Color doing the move</param>
            <param name="move">         Move</param>
            <param name="iPts">         Points for this move</param>
        </member>
        <member name="M:SrcChess2.SearchEngine.CancelSearch">
            <summary>
            Cancel the search
            </summary>
        </member>
        <member name="M:SrcChess2.SearchEngine.SortMoveList(System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS},System.Int32[])">
            <summary>
            Sort move list using the specified point array so the highest point move come first
            </summary>
            <param name="moveList"> Source move list to sort</param>
            <param name="arrPoints">Array of points for each move</param>
            <returns>
            Sorted move list
            </returns>
        </member>
        <member name="M:SrcChess2.SearchEngine.FindBestMove(SrcChess2.ChessBoard,SrcChess2.SearchEngine.SearchMode,SrcChess2.ChessBoard.PlayerColorE,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS},System.Int32[],SrcChess2.ChessBoard.PosInfoS,SrcChess2.ChessBoard.MovePosS@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Find the best move using a specific search method
            </summary>
            <param name="chessBoard">       Chess board</param>
            <param name="searchMode">       Search mode</param>
            <param name="ePlayerColor">     Color doing the move</param>
            <param name="moveList">         Move list</param>
            <param name="arrIndex">         Order of evaluation of the moves</param>
            <param name="posInfo">          Position information</param>
            <param name="moveBest">         Best move found</param>
            <param name="iPermCount">       Total permutation evaluated</param>
            <param name="iCacheHit">        Number of moves found in the translation table cache</param>
            <param name="iMaxDepth">        Maximum depth to use</param>
            <returns>
            true if a move has been found
            </returns>
        </member>
        <member name="M:SrcChess2.SearchEngine.FindBestMove(SrcChess2.ChessBoard,SrcChess2.SearchEngine.SearchMode,SrcChess2.ChessBoard.PlayerColorE,SrcChess2.ChessBoard.MovePosS@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Find the best move for a player using a specific method
            </summary>
            <param name="chessBoard">       Chess board</param>
            <param name="searchMode">       Search mode</param>
            <param name="ePlayerColor">     Color doing the move</param>
            <param name="moveBest">         Best move found</param>
            <param name="iPermCount">       Total permutation evaluated</param>
            <param name="iCacheHit">        Number of moves found in the translation table cache</param>
            <param name="iMaxDepth">        Maximum depth reached</param>
            <returns>
            true if a move has been found
            </returns>
        </member>
        <member name="T:SrcChess2.SearchEngine.ITrace">
            <summary>Interface to implement to do a search</summary>
        </member>
        <member name="M:SrcChess2.SearchEngine.ITrace.TraceSearch(System.Int32,SrcChess2.ChessBoard.PlayerColorE,SrcChess2.ChessBoard.MovePosS,System.Int32)">
            <summary>
            Search trace
            </summary>
            <param name="iDepth">       Depth of the move</param>
            <param name="ePlayerColor"> Player's color</param>
            <param name="movePos">      Move position</param>
            <param name="iPts">         Points for the board</param>
        </member>
        <member name="T:SrcChess2.SearchEngine.SearchMode">
            <summary>Option for the search</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.m_boardEvaluationWhite">
            <summary>Board evaluation for the white</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.m_boardEvaluationBlack">
            <summary>Board evaluation for the black</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.m_eOption">
            <summary>Search option</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.m_eThreadingMode">
            <summary>Threading option</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.m_iSearchDepth">
            <summary>Maximum search depth (or 0 to use iterative deepening depth-first search with time out)</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.m_iTimeOutInSec">
            <summary>Time out in second if using iterative deepening depth-first search</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.m_eRandomMode">
            <summary>Random mode</summary>
        </member>
        <member name="M:SrcChess2.SearchEngine.SearchMode.#ctor(SrcChess2.IBoardEvaluation,SrcChess2.IBoardEvaluation,SrcChess2.SearchEngine.SearchMode.OptionE,SrcChess2.SearchEngine.SearchMode.ThreadingModeE,System.Int32,System.Int32,SrcChess2.SearchEngine.SearchMode.RandomModeE)">
            <summary>Constructor</summary>
        </member>
        <member name="T:SrcChess2.SearchEngine.SearchMode.ThreadingModeE">
            <summary>Threading mode</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.ThreadingModeE.Off">
            <summary>No threading at all. User interface share the search one.</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.ThreadingModeE.DifferentThreadForSearch">
            <summary>Use a different thread for search and user interface</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.ThreadingModeE.OnePerProcessorForSearch">
            <summary>Use one thread for each processor for search and one for user inetrface</summary>
        </member>
        <member name="T:SrcChess2.SearchEngine.SearchMode.RandomModeE">
            <summary>Random mode</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.RandomModeE.Off">
            <summary>No random</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.RandomModeE.OnRepetitive">
            <summary>Use a repetitive random</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.RandomModeE.On">
            <summary>Use random with time seed</summary>
        </member>
        <member name="T:SrcChess2.SearchEngine.SearchMode.OptionE">
            <summary>Search options</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.OptionE.UseMinMax">
            <summary>Use MinMax search</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.OptionE.UseAlphaBeta">
            <summary>Use Alpha-Beta prunning function</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.OptionE.UseTransTable">
            <summary>Use transposition table</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.OptionE.UseBook">
            <summary>Use book opening. No way to sub-class enum so it's defined here</summary>
        </member>
        <member name="F:SrcChess2.SearchEngine.SearchMode.OptionE.UseIterativeDepthSearch">
            <summary>Use iterative depth-first search on a fix ply count</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.LiteCellColorProperty">
            <summary>Lite Cell Color property</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.DarkCellColorProperty">
            <summary>Dark Cell Color property</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.WhitePieceColorProperty">
            <summary>White Pieces Color property</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.BlackPieceColorProperty">
            <summary>Black Pieces Color property</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_pieceSet">
            <summary>Piece Set to use</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_board">
            <summary>Board</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_arrBorder">
            <summary>Array of frames containing the chess piece</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_arrPiece">
            <summary>Array containing the current piece</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_bWhiteInBottom">
            <summary>true to have white in the bottom of the screen, false to have black</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_ptSelectedCell">
            <summary>Currently selected cell</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_bAutoSelection">
            <summary>true to enable auto-selection</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_moveListUI">
            <summary>User interface used to display the move list</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_dateTimeStartSearching">
            <summary>Time the last search was started</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_timeSpanLastSearch">
            <summary>Elapse time of the last search</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_gameTimer">
            <summary>Timer for both player</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_strWhitePlayerName">
            <summary>Name of the player playing white piece</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_strBlackPlayerName">
            <summary>Name of the player playing black piece</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_eWhitePlayerType">
            <summary>Type of player playing white piece</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.m_eBlackPlayerType">
            <summary>Type of player playing black piece</summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.#cctor">
            <summary>
            Static Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.RefreshBoardColor">
            <summary>
            Refresh the board color
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.InitCell">
            <summary>
            Initialize the cell
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SetPieceControl(System.Int32,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Set the chess piece control
            </summary>
            <param name="iBoardPos">    Board position</param>
            <param name="ePiece">       Piece</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.RefreshCell(System.Int32,System.Boolean)">
            <summary>
            Refresh the specified cell
            </summary>
            <param name="iBoardPos">    Board position</param>
            <param name="bFullRefresh"> true to refresh even if its the same piece</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.RefreshCell(System.Int32)">
            <summary>
            Refresh the specified cell
            </summary>
            <param name="iBoardPos">    Board position</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.Refresh(System.Boolean)">
            <summary>
            Refresh the board
            </summary>
            <param name="bFullRefresh"> Refresh even if its the same piece</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.Refresh">
            <summary>
            Refresh the board
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.ResetBoard">
            <summary>
            Reset the board to the initial condition
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.ColorInfoChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when Image property changed
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SetCellSelectionState(SrcChess2.ChessBoardControl.IntPoint,System.Boolean)">
            <summary>
            Set the cell selection  appearance
            </summary>
            <param name="ptCell"></param>
            <param name="bSelected"></param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.OnUpdateCmdState(System.EventArgs)">
            <summary>
            Trigger the UpdateCmdState event. Called when command state need to be reevaluated.
            </summary>
            <param name="e">    Event argument</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.OnMoveSelected(SrcChess2.ChessBoardControl.MoveSelectedEventArgs)">
            <summary>
            Trigger the MoveSelected event
            </summary>
            <param name="e">    Event arguments</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.OnQueryPiece(SrcChess2.ChessBoardControl.QueryPieceEventArgs)">
            <summary>
            OnQueryPiece:       Trigger the QueryPiece event
            </summary>
            <param name="e">    Event arguments</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.OnQueryPawnPromotionType(SrcChess2.ChessBoardControl.QueryPawnPromotionTypeEventArgs)">
            <summary>
            OnQweryPawnPromotionType:   Trigger the QueryPawnPromotionType event
            </summary>
            <param name="e">            Event arguments</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SaveGame(System.IO.BinaryWriter)">
            <summary>
            Save the current game into a file
            </summary>
            <param name="writer">   Binary writer</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.LoadGame(System.IO.BinaryReader)">
            <summary>
            Load a game from a stream
            </summary>
            <param name="reader">   Binary reader</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.LoadFromFile">
            <summary>
            Load a board from a file selected by the user.
            </summary>
            <returns>
            true if a new board has been read
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SaveToFile">
            <summary>
            Save a board to a file selected by the user
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SavePGNToFile">
            <summary>
            Save the board to a file selected by the user in PGN format
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.CreateGameFromMove(SrcChess2.ChessBoard,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS},SrcChess2.ChessBoard.PlayerColorE,System.String,System.String,SrcChess2.PgnParser.PlayerTypeE,SrcChess2.PgnParser.PlayerTypeE,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create a new game using the specified list of moves
            </summary>
            <param name="chessBoardStarting">   Starting board or null if standard board</param>
            <param name="listMove">             List of moves</param>
            <param name="eNextMoveColor">       Color starting to play</param>
            <param name="strWhitePlayerName">   Name of the player playing white pieces</param>
            <param name="strBlackPlayerName">   Name of the player playing black pieces</param>
            <param name="eWhitePlayerType">     Type of player playing white pieces</param>
            <param name="eBlackPlayerType">     Type of player playing black pieces</param>
            <param name="spanPlayerWhite">      Timer for white</param>
            <param name="spanPlayerBlack">      Timer for black</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.CreateFromPGNText">
            <summary>
            Creates a game from a PGN text paste by the user
            </summary>
            <returns>
            true if a new board has been loaded
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SaveGameToPGNText(System.Boolean)">
            <summary>
            Creates a game from a PGN text paste by the user
            </summary>
            <returns>
            true if a new board has been loaded
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.CreateBookFromFiles">
            <summary>
            Create a book from files selected by the user
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SetCaseValue(System.Int32,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Set the piece in a case. Can only be used in design mode.
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.FindBookMove(SrcChess2.SearchEngine.SearchMode,SrcChess2.ChessBoard.MovePosS@)">
            <summary>
            Find a move from the opening book
            </summary>
            <param name="searchMode">       Search mode</param>
            <param name="move">             Found move</param>
            <returns>
            true if succeed, false if no move found in book
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.FindBestMove(SrcChess2.SearchEngine.SearchMode,SrcChess2.ChessBoard,SrcChess2.ChessBoard.MovePosS@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Find the best move for a player using alpha-beta pruning or minmax search
            </summary>
            <param name="searchMode">       Search mode</param>
            <param name="chessBoard">       Chess board to use. Null to use the base one</param>
            <param name="moveBest">         Best move found</param>
            <param name="iPermCount">       Total permutation evaluated</param>
            <param name="iCacheHit">        Number of moves found in the translation table cache</param>
            <param name="iMaxDepth">        Maximum depth evaluated</param>
            <returns>
            true if a move has been found
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.CancelSearch">
            <summary>
            Cancel search
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SrcChess2#SearchEngine#ITrace#TraceSearch(System.Int32,SrcChess2.ChessBoard.PlayerColorE,SrcChess2.ChessBoard.MovePosS,System.Int32)">
            <summary>
            Search trace
            </summary>
            <param name="iDepth">       Search depth</param>
            <param name="ePlayerColor"> Color who play</param>
            <param name="movePos">      Move position</param>
            <param name="iPts">         Points</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.GetHumanPos(SrcChess2.ChessBoardControl.IntPoint,SrcChess2.ChessBoardControl.IntPoint)">
            <summary>
            Gets the position express in a human form
            </summary>
            <param name="ptStart">      Starting Position</param>
            <param name="ptEnd">        Ending position</param>
            <returns>
            Human form position
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.GetCellFromPoint(System.Windows.Input.MouseEventArgs,SrcChess2.ChessBoardControl.IntPoint@)">
            <summary>
            Gets the cell position from a mouse event
            </summary>
            <param name="e">        Mouse event argument</param>
            <param name="ptCell">   Resulting cell</param>
            <returns>
            true if succeed, false if mouse don't point to a cell
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.FlashCell(SrcChess2.ChessBoardControl.IntPoint)">
            <summary>
            Flash the specified cell
            </summary>
            <param name="ptCell">   Cell to flash</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.FlashCell(System.Int32)">
            <summary>
            Flash the specified cell
            </summary>
            <param name="iStartPos">    Cell position</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.GetPosToUpdate(SrcChess2.ChessBoard.MovePosS)">
            <summary>
            Get additional position to update when doing or undoing a special move
            </summary>
            <param name="movePos">      Position of the move</param>
            <returns>
            Array of position to undo
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.ShowBeforeMove(SrcChess2.ChessBoard.MovePosS,System.Boolean)">
            <summary>
            Show before move is done
            </summary>
            <param name="movePos">      Position of the move</param>
            <param name="bFlash">       true to flash the from and destination pieces</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.ShowAfterMove(SrcChess2.ChessBoard.MovePosS,System.Boolean)">
            <summary>
            Show after move is done
            </summary>
            <param name="movePos">      Position of the move</param>
            <param name="bFlash">       true to flash the from and destination pieces</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.DoMove(SrcChess2.ChessBoard.MovePosS,System.Boolean,System.Int32,System.Int32,System.Int32)">
            <summary>
            Play the specified move
            </summary>
            <param name="movePos">      Position of the move</param>
            <param name="bFlash">       true to flash the from and destination pieces</param>
            <param name="iPermCount">   Permutation count</param>
            <param name="iDepth">       Maximum depth use to find the move</param>
            <param name="iCacheHit">    Number of permutation found in cache</param>
            <returns>
            NoRepeat, FiftyRuleRepeat, ThreeFoldRepeat, Tie, Check, Mate
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.UndoMove(System.Boolean)">
            <summary>
            Undo the last move
            </summary>
            <param name="bFlash">   true to flash the from and destination pieces</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.RedoMove(System.Boolean)">
            <summary>
            Redo the most recently undone move
            </summary>
            <param name="bFlash">   true to flash</param>
            <returns>
            NoRepeat, FiftyRuleRepeat, ThreeFoldRepeat, Check, Mate
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SelectMove(System.Int32,System.Boolean@)">
            <summary>
            Select a move by index using undo/redo buffer to move
            </summary>
            <param name="iIndex">   Index of the move. Can be -1</param>
            <param name="bSucceed"> true if index in range</param>
            <returns>
            Repeat result
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.ShowHintMove(SrcChess2.ChessBoard.MovePosS)">
            <summary>
            ShowHintMove:                   Show a hint on the next move to do
            </summary>
            <param name="movePos">          Move position</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.ShowHint(SrcChess2.SearchEngine.SearchMode,SrcChess2.ChessBoard.MovePosS@,System.Int32@,System.Int32@)">
            <summary>
            ShowHint:                       Find and show a hint on the next move to do
            </summary>
            <param name="searchMode">       Search mode</param>
            <param name="movePos">          Move position found</param>
            <param name="iPermCount">       Permutation count</param>
            <param name="iCacheHit">        Cache hit</param>
            <returns>
            true if a hint has been shown
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Intercept Mouse click
            </summary>
            <param name="e">    Event Parameter</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="E:SrcChess2.ChessBoardControl.MoveSelected">
            <summary>Called when a user select a valid move to be done</summary>
        </member>
        <member name="E:SrcChess2.ChessBoardControl.QueryPiece">
            <summary>Called when chess control in design mode need to know which piece to insert in the board</summary>
        </member>
        <member name="E:SrcChess2.ChessBoardControl.QueryPawnPromotionType">
            <summary>Called when chess control needs to know which type of pawn promotion must be done</summary>
        </member>
        <member name="E:SrcChess2.ChessBoardControl.UpdateCmdState">
            <summary>Called to refreshed the command state (menu, toolbar etc.)</summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.LiteCellColor">
            <summary>
            Image displayed to the button
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.DarkCellColor">
            <summary>
            Image displayed to the button
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.WhitePieceColor">
            <summary>
            Image displayed to the button
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.BlackPieceColor">
            <summary>
            Image displayed to the button
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.PieceSet">
            <summary>
            Current piece set
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.Board">
            <summary>
            Current chess board
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.MoveListUI">
            <summary>
            User interface responsible to display move list.
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.WhitePlayerName">
            <summary>
            Name of the player playing white piece
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.BlackPlayerName">
            <summary>
            Name of the player playing black piece
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.WhitePlayerType">
            <summary>
            Type of player playing white piece
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.BlackPlayerType">
            <summary>
            Type of player playing black piece
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.ChessBoard">
            <summary>
            Gets the chess board associated with the control
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.WhiteInBottom">
            <summary>
            Determine if the White are in the top or bottom of the draw board
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.AutoSelection">
            <summary>
            Enable or disable the auto selection mode
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.BoardDesignMode">
            <summary>
            Determine the board design mode
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.UndoCount">
            <summary>
            Gets the number of move which can be undone
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.RedoCount">
            <summary>
            Gets the number of move which can be redone
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.NextMoveColor">
            <summary>
            Current color to play
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.MoveList">
            <summary>
            List of played moves
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.LastFindBestMoveTimeSpan">
            <summary>
            Time use to find the last best move
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.GameTimer">
            <summary>
            Game timer
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.SelectedCell">
            <summary>
            Currently selected case
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoardControl.IsCellSelected">
            <summary>
            true if a cell is selected
            </summary>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.IntPoint">
            <summary>
            Integer Point
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.IntPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            Class Ctor
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.IntPoint.X">
            <summary>X point</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.IntPoint.Y">
            <summary>Y point</summary>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.IMoveListUI">
            <summary>
            Interface implemented by the UI which show the move list.
            This interface is called by the chess control each time a move has to be updated.
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.IMoveListUI.Reset(SrcChess2.ChessBoard)">
            <summary>Removes all move</summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.IMoveListUI.NewMoveDone(System.Int32,System.Int32,System.Int32)">
            <summary>Append a move</summary>
            <param name="iPermCount">Permutation analyzed</param>
            <param name="iDepth">Depth of the search</param>
            <param name="iCacheHit">Nb of permutation found in cache</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.IMoveListUI.RedoPosChanged">
            <summary>Called when the position in the redo buffer has changed</summary>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.IUpdateCmd">
            <summary>
            Interface implemented by the UI which show the lost pieces.
            This interface is called each time the chess board need an update on the lost pieces UI.
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.IUpdateCmd.Update">
            <summary>Update the lost pieces</summary>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.SyncFlash">
            <summary>
            Show a piece moving from starting to ending point
            </summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.SyncFlash.m_chessBoardControl">
            <summary>Chess Board Control</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.SyncFlash.m_brush">
            <summary>Solid Color Brush to flash</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.SyncFlash.m_colorStart">
            <summary>First Flash Color</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.SyncFlash.m_colorEnd">
            <summary>Second Flash Color</summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SyncFlash.#ctor(SrcChess2.ChessBoardControl,System.Windows.Media.SolidColorBrush,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Class Ctor
            </summary>
            <param name="chessBoardControl">    Chess Board Control</param>
            <param name="brush">                Solid Color Brush to flash</param>
            <param name="colorStart">           First flashing color</param>
            <param name="colorEnd">             Second flashing color</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SyncFlash.FlashCell(System.Int32,System.Double,System.EventHandler)">
            <summary>
            Flash the specified cell
            </summary>
            <param name="iCount">                   Flash count</param>
            <param name="dSec">                     Flash duration</param>
            <param name="eventHandlerTerminated">   Event handler to call when flash is finished</param>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SyncFlash.Flash">
            <summary>
            Show the move
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.SyncFlash.FirstFlash_Completed(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.MoveSelectedEventArgs">
            <summary>Event argument for the MoveSelected event</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.MoveSelectedEventArgs.Move">
            <summary>Move position</summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.MoveSelectedEventArgs.#ctor(SrcChess2.ChessBoard.MovePosS)">
            <summary>
            Constructor
            </summary>
            <param name="move">     Move position</param>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.QueryPieceEventArgs">
            <summary>Event argument for the QueryPiece event</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.QueryPieceEventArgs.Pos">
            <summary>Position of the square</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.QueryPieceEventArgs.Piece">
            <summary>Piece</summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.QueryPieceEventArgs.#ctor(System.Int32,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Constructor
            </summary>
            <param name="iPos">     Position of the square</param>
            <param name="ePiece">   Piece</param>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.QueryPawnPromotionTypeEventArgs">
            <summary>Event argument for the QueryPawnPromotionType event</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.QueryPawnPromotionTypeEventArgs.PawnPromotionType">
            <summary>Promotion type (Queen, Rook, Bishop, Knight or Pawn)</summary>
        </member>
        <member name="F:SrcChess2.ChessBoardControl.QueryPawnPromotionTypeEventArgs.ValidPawnPromotion">
            <summary>Possible pawn promotions in the current context</summary>
        </member>
        <member name="M:SrcChess2.ChessBoardControl.QueryPawnPromotionTypeEventArgs.#ctor(SrcChess2.ChessBoard.ValidPawnPromotionE)">
            <summary>
            Constructor
            </summary>
            <param name="eValidPawnPromotion">  Possible pawn promotions in the current context</param>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.MoveSelectedEventHandler">
            <summary>Delegate for the MoveSelected event</summary>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.QueryPieceEventHandler">
            <summary>Delegate for the QueryPiece event</summary>
        </member>
        <member name="T:SrcChess2.ChessBoardControl.QueryPawnPromotionTypeEventHandler">
            <summary>Delegate for the QueryPawnPromotionType event</summary>
        </member>
        <member name="M:SrcChess2.LocalChessBoardControl.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:SrcChess2.LocalChessBoardControl.LoadGame(System.IO.BinaryReader)">
            <summary>
            Load the game board
            </summary>
            <param name="reader">   Binary reader</param>
            <returns>
            true if succeed, false if failed
            </returns>
        </member>
        <member name="M:SrcChess2.LocalChessBoardControl.SaveGame(System.IO.BinaryWriter)">
            <summary>
            Save the game board
            </summary>
            <param name="writer">   Binary writer</param>
        </member>
        <member name="M:SrcChess2.LocalChessBoardControl.CreateGameFromMove(SrcChess2.ChessBoard,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS},SrcChess2.ChessBoard.PlayerColorE,System.String,System.String,SrcChess2.PgnParser.PlayerTypeE,SrcChess2.PgnParser.PlayerTypeE,System.TimeSpan,System.TimeSpan)">
            <summary>
            Create a new game using the specified list of moves
            </summary>
            <param name="chessBoardStarting">   Starting board or null if standard board</param>
            <param name="listMove">             List of moves</param>
            <param name="eNextMoveColor">       Color starting to play</param>
            <param name="strWhitePlayerName">   Name of the player playing white pieces</param>
            <param name="strBlackPlayerName">   Name of the player playing black pieces</param>
            <param name="eWhitePlayerType">     Type of player playing white pieces</param>
            <param name="eBlackPlayerType">     Type of player playing black pieces</param>
            <param name="spanPlayerWhite">      Timer for white</param>
            <param name="spanPlayerBlack">      Timer for black</param>
        </member>
        <member name="P:SrcChess2.LocalChessBoardControl.Father">
            <summary>Father Window</summary>
        </member>
        <member name="T:SrcChess2.GameTimer">
            <summary>
            Handle the timer for both player
            </summary>
        </member>
        <member name="F:SrcChess2.GameTimer.m_bEnabled">
            <summary>true if timer is tickling</summary>
        </member>
        <member name="F:SrcChess2.GameTimer.m_timerStart">
            <summary>Time of last commit</summary>
        </member>
        <member name="F:SrcChess2.GameTimer.m_timeSpanCommitedWhite">
            <summary>Commited time for the white</summary>
        </member>
        <member name="F:SrcChess2.GameTimer.m_timeSpanCommitedBlack">
            <summary>Commited time for the black</summary>
        </member>
        <member name="F:SrcChess2.GameTimer.m_ePlayerColor">
            <summary>Player currently playing</summary>
        </member>
        <member name="M:SrcChess2.GameTimer.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:SrcChess2.GameTimer.Commit">
            <summary>
            Commit the uncommited time to the current player
            </summary>
        </member>
        <member name="M:SrcChess2.GameTimer.ResetTo(SrcChess2.ChessBoard.PlayerColorE,System.Int64,System.Int64)">
            <summary>
            Reset the timer of both player
            </summary>
            <param name="ePlayerColor"> Playing color</param>
            <param name="lWhiteTicks">  White Ticks</param>
            <param name="lBlackTicks">  Black Ticks</param>
        </member>
        <member name="M:SrcChess2.GameTimer.Reset(SrcChess2.ChessBoard.PlayerColorE)">
            <summary>
            Reset the timer of both player
            </summary>
            <param name="ePlayerColor"> Playing color</param>
        </member>
        <member name="M:SrcChess2.GameTimer.GetHumanElapse(System.TimeSpan)">
            <summary>
            Time span to string
            </summary>
        </member>
        <member name="P:SrcChess2.GameTimer.Enabled">
            <summary>
            Enabled state of the timer
            </summary>
        </member>
        <member name="P:SrcChess2.GameTimer.PlayerColor">
            <summary>
            Color of the player playing
            </summary>
        </member>
        <member name="P:SrcChess2.GameTimer.WhitePlayTime">
            <summary>
            Time spent by the white player
            </summary>
        </member>
        <member name="P:SrcChess2.GameTimer.BlackPlayTime">
            <summary>
            Time spent by the black player
            </summary>
        </member>
        <member name="T:SrcChess2.BoardEvaluationTest">
            <summary>Test board evaluation function</summary>
        </member>
        <member name="T:SrcChess2.BoardEvaluationBasic">
            <summary>Basic board evaluation function</summary>
        </member>
        <member name="T:SrcChess2.IBoardEvaluation">
            <summary>Implements a board evaluation methods</summary>
            Board:  63 62 61 60 59 58 57 56
                    55 54 53 52 51 50 49 48
                    47 46 45 44 43 42 41 40
                    39 38 37 36 35 34 33 32
                    31 30 29 28 27 26 25 24
                    23 22 21 20 19 18 17 16
                    15 14 13 12 11 10 9  8
                    7  6  5  4  3  2  1  0
            Each position contains a PieceE enum with PieceE.White or PieceE.Black
            
            m_piPiecesCount[PieceE.Pawn | PieceE.White .. PieceE.King | PieceE.White] for white
            m_piPiecesCount[PieceE.Pawn | PieceE.Black .. PieceE.King | PieceE.Black] for black
            Black and White king position are set using the board position.
            
        </member>
        <member name="M:SrcChess2.IBoardEvaluation.Points(SrcChess2.ChessBoard.PieceE[],System.Int32[],SrcChess2.ChessBoard.PosInfoS,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Evaluates a board. The number of point is greater than 0 if white is in advantage, less than 0 if black is.
            </summary>
            <param name="pBoard">           Board.</param>
            <param name="piPiecesCount">    Number of each pieces</param>
            <param name="posInfo">          Information about pieces position</param>
            <param name="iWhiteKingPos">    Position of the white king</param>
            <param name="iBlackKingPos">    Position of the black king</param>
            <param name="bWhiteCastle">     White has castled</param>
            <param name="bBlackCastle">     Black has castled</param>
            <param name="iMoveCountDelta">  Number of possible white moves - Number of possible black moves</param>
            <returns>
            Points
            </returns>
        </member>
        <member name="P:SrcChess2.IBoardEvaluation.Name">
            <summary>
            Name of the board evaluation method.
            </summary>
        </member>
        <member name="F:SrcChess2.BoardEvaluationBasic.s_piPiecePoint">
            <summary>Value of each piece/color.</summary>
        </member>
        <member name="M:SrcChess2.BoardEvaluationBasic.#cctor">
            <summary>
            Static constructor
            </summary>
        </member>
        <member name="M:SrcChess2.BoardEvaluationBasic.Points(SrcChess2.ChessBoard.PieceE[],System.Int32[],SrcChess2.ChessBoard.PosInfoS,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Evaluates a board. The number of point is greater than 0 if white is in advantage, less than 0 if black is.
            </summary>
            <param name="pBoard">           Board.</param>
            <param name="piPiecesCount">    Number of each pieces</param>
            <param name="posInfo">          Information about pieces position</param>
            <param name="iWhiteKingPos">    Position of the white king</param>
            <param name="iBlackKingPos">    Position of the black king</param>
            <param name="bWhiteCastle">     White has castled</param>
            <param name="bBlackCastle">     Black has castled</param>
            <param name="iMoveCountDelta">  Number of possible white move - Number of possible black move</param>
            <returns>
            Points
            </returns>
        </member>
        <member name="P:SrcChess2.BoardEvaluationBasic.Name">
            <summary>
            Name of the evaluation method
            </summary>
        </member>
        <member name="M:SrcChess2.BoardEvaluationTest.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:SrcChess2.BoardEvaluationTest.Points(SrcChess2.ChessBoard.PieceE[],System.Int32[],SrcChess2.ChessBoard.PosInfoS,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Evaluates a board. The number of point is greater than 0 if white is in advantage, less than 0 if black is.
            </summary>
            <param name="pBoard">           Board.</param>
            <param name="piPiecesCount">    Number of each pieces</param>
            <param name="posInfo">          Information about pieces position</param>
            <param name="iWhiteKingPos">    Position of the white king</param>
            <param name="iBlackKingPos">    Position of the black king</param>
            <param name="bWhiteCastle">     White has castled</param>
            <param name="bBlackCastle">     Black has castled</param>
            <param name="iMoveCountDelta">  Number of possible white move - Number of possible black move</param>
            <returns>
            Points
            </returns>
        </member>
        <member name="P:SrcChess2.BoardEvaluationTest.Name">
            <summary>
            Name of the evaluation method
            </summary>
        </member>
        <member name="T:SrcChess2.SearchEngineMinMax">
            <summary>Base class for Search Engine</summary>
        </member>
        <member name="M:SrcChess2.SearchEngineMinMax.#ctor(SrcChess2.SearchEngine.ITrace,System.Random,System.Random)">
            <summary>
            Class constructor
            </summary>
            <param name="trace">    Trace object or null</param>
            <param name="rnd">      Random object</param>
            <param name="rndRep">   Repetitive random object</param>
        </member>
        <member name="M:SrcChess2.SearchEngineMinMax.MinMax(SrcChess2.ChessBoard,SrcChess2.SearchEngine.SearchMode,SrcChess2.ChessBoard.PlayerColorE,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Minimum/maximum depth first search
            </summary>
            <param name="chessBoard">       Chess board</param>
            <param name="searchMode">       Search mode</param>
            <param name="ePlayerColor">     Color doing the move</param>
            <param name="iDepth">           Actual search depth</param>
            <param name="iWhiteMoveCount">  Number of moves white can do</param>
            <param name="iBlackMoveCount">  Number of moves black can do</param>
            <param name="iPermCount">       Total permutation evaluated</param>
            <returns>
            Points to give for this move
            </returns>
        </member>
        <member name="M:SrcChess2.SearchEngineMinMax.FindBestMoveUsingMinMaxAtDepth(SrcChess2.ChessBoard,SrcChess2.SearchEngine.SearchMode,SrcChess2.ChessBoard.PlayerColorE,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS},System.Int32[],System.Int32,SrcChess2.ChessBoard.MovePosS@,System.Int32@)">
            <summary>
            Find the best move for a player using minmax search
            </summary>
            <param name="chessBoard">       Chess board</param>
            <param name="searchMode">       Search mode</param>
            <param name="ePlayerColor">     Color doing the move</param>
            <param name="moveList">         Move list</param>
            <param name="arrIndex">         Order of evaluation of the moves</param>
            <param name="iDepth">           Maximum depth</param>
            <param name="moveBest">         Best move found</param>
            <param name="iPermCount">       Total permutation evaluated</param>
            <returns>
            true if a move has been found
            </returns>
        </member>
        <member name="M:SrcChess2.SearchEngineMinMax.FindBestMove(SrcChess2.ChessBoard,SrcChess2.SearchEngine.SearchMode,SrcChess2.ChessBoard.PlayerColorE,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS},System.Int32[],SrcChess2.ChessBoard.PosInfoS,SrcChess2.ChessBoard.MovePosS@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Find the best move for a player using minmax search
            </summary>
            <param name="chessBoard">       Chess board</param>
            <param name="searchMode">       Search mode</param>
            <param name="ePlayerColor">     Color doing the move</param>
            <param name="moveList">         Move list</param>
            <param name="arrIndex">         Order of evaluation of the moves</param>
            <param name="posInfo">          Information about pieces attacks</param>
            <param name="moveBest">         Best move found</param>
            <param name="iPermCount">       Nb of permutations evaluated</param>
            <param name="iCacheHit">        Nb of cache hit</param>
            <param name="iMaxDepth">        Maximum depth evaluated</param>
            <returns>
            true if a move has been found
            </returns>
        </member>
        <member name="T:SrcChess2.PgnUtil">
            <summary>
            Utility class to help handling PGN files
            </summary>
        </member>
        <member name="M:SrcChess2.PgnUtil.OpenInpFile(System.String)">
            <summary>
            Open an file for reading
            </summary>
            <param name="strInpFileName">   File name to open</param>
            <returns>
            Stream or null if unable to open the file.
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.CreateOutFile(System.String)">
            <summary>
            Creates a new file
            </summary>
            <param name="strOutFileName">   Name of the file to create</param>
            <returns>
            Stream or null if unable to create the file.
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetNextNonEmptyLine(System.IO.TextReader)">
            <summary>
            Gets the next non emoty line. Support one line pushed ahead
            </summary>
            <param name="reader">   Text reader</param>
            <returns>
            Line or null if EOF
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetELOValue(System.String)">
            <summary>
            Extract the ELO value of the string
            </summary>
            <param name="str">      Input string</param>
            <returns>
            ELO value or -1 if not found
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetPGNGame(System.IO.TextReader,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Get the next PGN game from the file.
            </summary>
            <param name="reader">           Text reader</param>
            <param name="iGameStartPos">    Return the beginning of the game in the string array</param>
            <param name="iWhiteELO">        White player ELO</param>
            <param name="iBlackELO">        Black player ELO</param>
            <returns>
            Array of string describing the game or null if EOF
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetPGNGame(System.IO.TextReader,System.Int32@)">
            <summary>
            Get the next PGN game from the file.
            </summary>
            <param name="reader">           Text reader</param>
            <param name="iGameStartPos">    Return the beginning of the game in the string array</param>
            <returns>
            Array of string describing the game or null if EOF
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.WritePGN(System.IO.TextWriter,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Write a PGN game in the specified output stream
            </summary>
            <param name="writer">           Text writer</param>
            <param name="arrGame">          Array of string representing the PGN file</param>
            <param name="iGameStartPos">    Beginning of the game in the string array</param>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetPGNGameInfo(System.Collections.Generic.List{System.String},System.Int32,System.String@,System.String@,System.String@,System.String@,System.Int32@,System.Int32@)">
            <summary>
            Gets the information about a PGN game
            </summary>
            <param name="arrGame">          Array of string representing the PGN file</param>
            <param name="iGameStartPos">    Beginning of the game in the string array</param>
            <param name="strWhitePlayer">   Name of the white player</param>
            <param name="strBlackPlayer">   Name of the black player</param>
            <param name="strGameResult">    Result of the game</param>
            <param name="strGameDate">      Date of the game</param>
            <param name="iWhiteELO">        White player ELO</param>
            <param name="iBlackELO">        Black player ELO</param>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetPGNGameInfo(System.Collections.Generic.List{System.String},System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the information about a PGN game
            </summary>
            <param name="arrGame">          Array of string representing the PGN file</param>
            <param name="iGameStartPos">    Beginning of the game in the string array</param>
            <param name="iWhiteELO">        White player ELO</param>
            <param name="iBlackELO">        Black player ELO</param>
        </member>
        <member name="M:SrcChess2.PgnUtil.ScanPGN(System.IO.Stream,System.Collections.Generic.Dictionary{System.String,System.String},System.Int32@,System.Int32@)">
            <summary>
            Scan the PGN stream to retrieve some informations
            </summary>
            <param name="streamInp">        Stream containing the PGN file</param>
            <param name="hashPlayerList">   Hash list which will be filled with the players list</param>
            <param name="iMinELO">          Minimum ELO found in the games</param>
            <param name="iMaxELO">          Maximum ELO found in the games</param>
            <returns>
            Number of games found in the stream or -1 if error.
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.IsRetained(System.Collections.Generic.List{System.String},System.Int32,System.Int32,SrcChess2.PgnUtil.FilterClause)">
            <summary>
            Checks if the specified game must be retained accordingly to the specified filter
            </summary>
            <param name="arrGame">          Array of string representing the PGN file</param>
            <param name="iGameStartPos">    Beginning of the game in the string array</param>
            <param name="iAvgELO">          Game average ELO</param>
            <param name="filterClause">     Filter clause</param>
            <returns>
            true if must be retained
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.FilterPGN(System.IO.Stream,System.IO.Stream,SrcChess2.PgnUtil.FilterClause)">
            <summary>
            Filter the content of the PGN file in the input stream to fill the output stream
            </summary>
            <param name="streamInp">    Inout stream</param>
            <param name="streamOut">    Output stream. If null, just run to determine the result count.</param>
            <param name="filterClause">     Filter clause</param>
            <returns>
            Number of resulting games.
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.ExtractValue(System.String)">
            <summary>
            Extract the value from a PGN tag
            </summary>
            <param name="strTag">       Tag</param>
            <returns>
            Value or '???' if unable to decode.
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetPGNGameDesc(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Build a description for the specified game.
            </summary>
            <param name="arrGame">          Array of string representing the PGN file</param>
            <param name="iGameStartPos">    Beginning of the game in the string array</param>
            <returns>
            Description
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.CreatePGNSubset">
            <summary>
            Creates a new PGN file as a subset of an existing one.
            </summary>
        </member>
        <member name="M:SrcChess2.PgnUtil.FillListBoxWithDesc(System.IO.Stream,System.Windows.Controls.ItemsControl)">
            <summary>
            Fill a listbox with the description of the games include in a PGN stream
            </summary>
            <param name="streamInp">        Stream containing the PGN file</param>
            <param name="itemsControl">     Items control</param>
            <returns>
            Number of games found in the stream or -1 if error.
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetNGame(System.IO.Stream,System.Int32)">
            <summary>
            Get the Nth game
            </summary>
            <param name="streamInp">        Stream containing the PGN file</param>
            <param name="iIndex">           Game index (0-max)</param>
            <returns>
            Game or null if error
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetSquareIDFromPGN(System.String)">
            <summary>
            Gets Square Id from the PGN representation
            </summary>
            <param name="strMove">  PGN square representation.</param>
            <returns>
            square id (0-63)
            PGN representation
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetPGNSquareID(System.Int32)">
            <summary>
            Gets the PGN representation of a square
            </summary>
            <param name="iPos">         Absolute position of the square.</param>
            <returns>
            PGN representation
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.FindMoveAmbiguity(SrcChess2.ChessBoard,SrcChess2.ChessBoard.MovePosS,SrcChess2.ChessBoard.PlayerColorE)">
            <summary>
            Find all moves which end to the same position which can create ambiguity
            </summary>
            <param name="chessBoard">   Chessboard before the move has been done.</param>
            <param name="move">         Move to convert</param>
            <param name="eMovePlayer">  Player making the move</param>
            <returns>
            PGN move
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetPGNMoveFromMove(SrcChess2.ChessBoard,SrcChess2.ChessBoard.MovePosS,System.Boolean)">
            <summary>
            Gets a PGN move from a MovePosS structure and a chessboard.
            </summary>
            <param name="chessBoard">       Chessboard before the move has been done.</param>
            <param name="move">             Move to convert</param>
            <param name="bIncludeEnding">   true to include ending</param>
            <returns>
            PGN move
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetFENFromBoard(SrcChess2.ChessBoard)">
            <summary>
            Generates FEN
            </summary>
            <param name="chessBoard">       Actual chess board (after the move)</param>
            <returns>
            PGN representation of the game
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetPGNFromBoard(SrcChess2.ChessBoard,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,SrcChess2.PgnParser.PlayerTypeE,SrcChess2.PgnParser.PlayerTypeE,System.TimeSpan,System.TimeSpan)">
            <summary>
            Generates the PGN representation of the board
            </summary>
            <param name="chessBoard">       Actual chess board (after the move)</param>
            <param name="bIncludeRedoMove"> true to include redo move</param>
            <param name="strEvent">         Event tag</param>
            <param name="strSite">          Site tag</param>
            <param name="strDate">          Date tag</param>
            <param name="strRound">         Round tag</param>
            <param name="strWhitePlayer">   White player's name</param>
            <param name="strBlackPlayer">   Black player's name</param>
            <param name="eWhitePlayerType"> White player's type</param>
            <param name="eBlackPlayerType"> Black player's type</param>
            <param name="spanWhitePlayer">  Timer for the white</param>
            <param name="spanBlackPlayer">  Timer for the black</param>
            <returns>
            PGN representation of the game
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.GetPGNArrayFromMoveList(SrcChess2.ChessBoard)">
            <summary>
            Generates the PGN representation of a series of moves
            </summary>
            <param name="chessBoard">   Actual chess board.</param>
            <returns>
            PGN representation of the game
            </returns>
        </member>
        <member name="T:SrcChess2.PgnUtil.FilterClause">
            <summary>Information use to filter a PGN file</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_bAllRanges">
            <summary>All ELO included if true</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_bIncludesUnrated">
            <summary>Includes unrated games if true</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_hashRanges">
            <summary>If not all EOL included, hash of all ELO which must be included. Each value represent a range (value, value+99)</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_bAllPlayers">
            <summary>All players included if true</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_hashPlayerList">
            <summary>Hash of all players to include if not all included</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_bAllEnding">
            <summary>Includes all ending if true</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_bEndingWhiteWinning">
            <summary>true to include game winned by white player</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_bEndingBlackWinning">
            <summary>true to include game winned by black player</summary>
        </member>
        <member name="F:SrcChess2.PgnUtil.FilterClause.m_bEndingDraws">
            <summary>true to include draws game </summary>
        </member>
        <member name="T:SrcChess2.PgnUtil.PGNGameDescItem">
            <summary>Item used to fill the description listbox so we can find the original index in the list after a sort</summary>
        </member>
        <member name="M:SrcChess2.PgnUtil.PGNGameDescItem.#ctor(System.String,System.Int32)">
            <summary>
            Class constructor
            </summary>
            <param name="strDesc">  Item description</param>
            <param name="iIndex">   Item index</param>
        </member>
        <member name="M:SrcChess2.PgnUtil.PGNGameDescItem.CompareTo(SrcChess2.PgnUtil.PGNGameDescItem)">
            <summary>
            IComparable interface
            </summary>
            <param name="other">    Item to compare with</param>
            <returns>
            -1, 0, 1
            </returns>
        </member>
        <member name="M:SrcChess2.PgnUtil.PGNGameDescItem.ToString">
            <summary>
            Return the description
            </summary>
            <returns>
            Description
            </returns>
        </member>
        <member name="P:SrcChess2.PgnUtil.PGNGameDescItem.Description">
            <summary>
            Description of the item
            </summary>
        </member>
        <member name="P:SrcChess2.PgnUtil.PGNGameDescItem.Index">
            <summary>
            Index of the item
            </summary>
        </member>
        <member name="T:SrcChess2.BoardEvaluationUtil">
            <summary>Utility class creating and holding all board evaluator functions</summary>
        </member>
        <member name="F:SrcChess2.BoardEvaluationUtil.m_listBoardEvaluator">
            <summary>List of all board evaluator object</summary>
        </member>
        <member name="M:SrcChess2.BoardEvaluationUtil.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:SrcChess2.BoardEvaluationUtil.BuildBoardEvaluationList">
            <summary>
            Creates all build evaluator objects using reflection to find them
            </summary>
        </member>
        <member name="M:SrcChess2.BoardEvaluationUtil.FindBoardEvaluator(System.String)">
            <summary>
            Find a board evaluator using its name
            </summary>
            <param name="strName">  Evaluation method name</param>
            <returns>
            Object
            </returns>
        </member>
        <member name="P:SrcChess2.BoardEvaluationUtil.BoardEvaluators">
            <summary>
            Returns the list of board evaluators
            </summary>
        </member>
        <member name="T:SrcChess2.ChessBoard">
            <summary>Implementation of the chess board without any user interface.</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.s_posInfoNull">
            <summary>NULL position info</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.s_pppiCaseMoveDiagLine">
            <summary>Набор возможных диагональных и линейных ходов для каждой клетки</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.s_pppiCaseMoveDiagonal">
            <summary>Набор возможных диагональных ходов для каждой клетки</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.s_pppiCaseMoveLine">
            <summary>Набор возможных линейных ходов для каждой клетки</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.s_ppiCaseMoveKnight">
            <summary>Набор возможных ходов конём для каждой клетки</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.s_ppiCaseMoveKing">
            <summary>Набор возможных ходов королём для каждой клетки</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.s_ppiCaseBlackPawnCanAttackFrom">
            <summary>Набор возможных взятий чёрной пешкой для каждой клетки</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.s_ppiCaseWhitePawnCanAttackFrom">
            <summary>Набор возможных взятий белой пешкой для каждой клетки</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_pBoard">
            <summary>Сама доска как цифровой набор клеток (массив) содержащий значения фигур</summary>
            63 62 61 60 59 58 57 56
            55 54 53 52 51 50 49 48
            47 46 45 44 43 42 41 40
            39 38 37 36 35 34 33 32
            31 30 29 28 27 26 25 24
            23 22 21 20 19 18 17 16
            15 14 13 12 11 10 9  8
            7  6  5  4  3  2  1  0
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iBlackKingPos">
            <summary>Position of the black king</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iWhiteKingPos">
            <summary>Position of the white king</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_piPiecesCount">
            <summary>Number of pieces of each kind/color</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_rnd">
            <summary>Random number generator</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_rndRep">
            <summary>Random number generator (repetitive, seed = 0)</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iRBlackRookMoveCount">
            <summary>Number of time the right black rook has been moved. Used to determine if castle is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iLBlackRookMoveCount">
            <summary>Number of time the left black rook has been moved. Used to determine if castle is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iBlackKingMoveCount">
            <summary>Number of time the black king has been moved. Used to determine if castle is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iRWhiteRookMoveCount">
            <summary>Number of time the right white rook has been moved. Used to determine if castle is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iLWhiteRookMoveCount">
            <summary>Number of time the left white rook has been moved. Used to determine if castle is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iWhiteKingMoveCount">
            <summary>Number of time the white king has been moved. Used to determine if castle is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_bWhiteCastle">
            <summary>White has castle if true</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_bBlackCastle">
            <summary>Black has castle if true</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_iPossibleEnPassantAt">
            <summary>Not 0 if the last move was to move a pawn from 2 position</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_stackPossibleEnPassantAt">
            <summary>Stack of m_iPossibleEnPassantAt values</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_book">
            <summary>Opening book</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_i64ZobristKey">
            <summary>Current zobrist key value. Probably unique for the current board position</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_trace">
            <summary>Object where to redirect the trace if any</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_moveHistory">
            <summary>Move history use to handle the fifty-move rule and the threefold repetition rule.</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_bDesignMode">
            <summary>The board is in design mode if true</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_moveStack">
            <summary>Stack of moves since the initial board</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_eNextMoveColor">
            <summary>Color of the next move</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_bStdInitialBoard">
            <summary>true if the initial board is the standard one</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_searchEngineAlphaBeta">
            <summary>Search engine using Alpha-Beta pruning</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_searchEngineMinMax">
            <summary>Search engine using Min-Max pruning</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.m_posInfo">
            <summary>Information about pieces attack</summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.#cctor">
            <summary>
            Class static constructor. 
            Builds the list of possible moves for each piece type per position.
            Etablished the value of each type of piece for board evaluation.
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.FillMoves(System.Int32,System.Collections.Generic.List{System.Int32[]},System.Int32[],System.Boolean)">
            <summary>
            Fill the possible move array using the specified delta
            </summary>
            <param name="iStartPos">    Start position</param>
            <param name="arrMove">      Array of move to fill</param>
            <param name="arrDelta">     List of delta</param>
            <param name="bRepeat">      true to repeat, false to do it once</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.#ctor(SrcChess2.SearchEngineAlphaBeta,SrcChess2.SearchEngineMinMax)">
            <summary>
            Class constructor. Build a board.
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.#ctor(SrcChess2.SearchEngine.ITrace)">
            <summary>
            Class constructor. Build a board.
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.#ctor">
            <summary>
            Class constructor. Build a board.
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.#ctor(SrcChess2.ChessBoard)">
            <summary>
            Class constructor. Use to create a new clone
            </summary>
            <param name="chessBoard">   Board to copy from</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.CopyFrom(SrcChess2.ChessBoard)">
            <summary>
            Copy the state of the board from the specified one.
            </summary>
            <param name="chessBoard">   Board to copy from</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.Clone">
            <summary>
            Clone the current board
            </summary>
            <returns>
            New copy of the board
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.ComputeBoardExtraInfo(SrcChess2.ChessBoard.PlayerColorE,System.Boolean)">
            <summary>
            Compute extra information about the board
            </summary>
            <param name="ePlayerToMove">        Player color to move</param>
            <param name="bAddRepetitionInfo">   true to add board repetition information</param>
            <returns>
            Extra information about the board to discriminate between two boards with sames pieces but
            different setting.
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.ReadBook(System.String)">
            <summary>
            Read the opening book from disk
            </summary>
            <param name="strFileName">  File name</param>
            <returns>
            true if succeed, false if not
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.ReadBookFromResource(System.String)">
            <summary>
            Read the opening book from disk
            </summary>
            <param name="strFileName">  File name</param>
            <returns>
            true if succeed, false if not
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.ResetInitialBoardInfo(SrcChess2.ChessBoard.PlayerColorE,System.Boolean,SrcChess2.ChessBoard.BoardStateMaskE,System.Int32)">
            <summary>
            Reset initial board info
            </summary>
            <param name="eNextMoveColor">   Next color moving</param>
            <param name="bInitialBoardStd"> true if its a standard board, false if coming from FEN or design mode</param>
            <param name="eMask">            Extra bord information</param>
            <param name="iEnPassant">       Position for en passant</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.ResetBoard">
            <summary>
            Reset the board to the initial configuration
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.SaveBoard(System.IO.BinaryWriter)">
            <summary>
            Save the content of the board into the specified binary writer
            </summary>
            <param name="writer">   Binary writer</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.LoadBoard(System.IO.BinaryReader)">
            <summary>
            Load the content of the board into the specified stream
            </summary>
            <param name="reader">   Binary reader</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.CreateGameFromMove(SrcChess2.ChessBoard,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS},SrcChess2.ChessBoard.PlayerColorE)">
            <summary>
            Create a new game using the specified list of moves
            </summary>
            <param name="chessBoardStarting">   Starting board or null if standard board</param>
            <param name="listMove">             List of moves</param>
            <param name="eStartingColor">       Board starting color</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.OpenDesignMode">
            <summary>
            Open the design mode
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.CloseDesignMode(SrcChess2.ChessBoard.PlayerColorE,SrcChess2.ChessBoard.BoardStateMaskE,System.Int32)">
            <summary>
            Try to close the design mode.
            </summary>
            <param name="eNextMoveColor">   Color of the next move</param>
            <param name="eBoardMask">       Board extra information</param>
            <param name="iEnPassant">       Position of en passant or 0 if none</param>
            <returns>
            true if succeed, false if board is invalid
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.UpdatePackedBoardAndZobristKey(System.Int32,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Update the packed board representation and the value of the hash key representing the current board state.
            </summary>
            <param name="iPos1">        Position of the change</param>
            <param name="eNewPiece1">   New piece</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.UpdatePackedBoardAndZobristKey(System.Int32,SrcChess2.ChessBoard.PieceE,System.Int32,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Update the packed board representation and the value of the hash key representing the current board state. Use if two
            board positions are changed.
            </summary>
            <param name="iPos1">        Position of the change</param>
            <param name="eNewPiece1">   New piece</param>
            <param name="iPos2">        Position of the change</param>
            <param name="eNewPiece2">   New piece</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.GetEatedPieceCount(SrcChess2.ChessBoard.PieceE)">
            <summary>
            Get the number of the specified piece which has been eated
            </summary>
            <param name="ePiece">   Piece and color</param>
            <returns>
            Count
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.CheckIntegrity">
            <summary>
            Check the integrity of the board. Use for debugging.
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.DoMoveNoLog(SrcChess2.ChessBoard.MovePosS)">
            <summary>
            Do the move (without log)
            </summary>
            <param name="movePos">      Move to do</param>
            <returns>
            NoRepeat        No repetition
            ThreeFoldRepeat Three times the same board
            FiftyRuleRepeat Fifty moves without pawn move or piece eaten
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.UndoMoveNoLog(SrcChess2.ChessBoard.MovePosS)">
            <summary>
            Undo a move (without log)
            </summary>
            <param name="movePos">  Move to undo</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.IsEnoughPieceForCheckMate">
            <summary>
            Check if there is enough pieces to make a check mate
            </summary>
            <returns>
            true            Yes
            false           No
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.CheckNextMove">
            <summary>
            Check if next move is possible.
            </summary>
            <returns>
            NoRepeat        Yes
            Check           Yes, but the user is currently in check
            Tie             No, no move for the user
            Mate            No, user is checkmate
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.DoMove(SrcChess2.ChessBoard.MovePosS)">
            <summary>
            Do the move
            </summary>
            <param name="movePos">      Move to do</param>
            <returns>
            NoRepeat        No repetition
            ThreeFoldRepeat Three times the same board
            FiftyRuleRepeat Fifty moves without pawn move or piece eaten
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.UndoMove">
            <summary>
            Undo a move
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.RedoMove">
            <summary>
            Redo a move
            </summary>
            <returns>
            NoRepeat        No repetition
            ThreeFoldRepeat Three times the same board
            FiftyRuleRepeat Fifty moves without pawn move or piece eaten
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.SetUndoRedoPosition(System.Int32)">
            <summary>
            SetUndoRedoPosition:    Set the Undo/Redo position
            </summary>
            <param name="iPos">     New position</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumTheseAttackPos(System.Collections.Generic.List{System.Byte},System.Int32[][],SrcChess2.ChessBoard.PieceE,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Enumerates the attacking position using arrays of possible position and two possible enemy pieces
            </summary>
            <param name="arrAttackPos">     Array to fill with the attacking position. Can be null if only the count is wanted</param>
            <param name="ppiCaseMoveList">  Array of array of position.</param>
            <param name="ePiece1">          Piece which can possibly attack this position</param>
            <param name="ePiece2">          Piece which can possibly attack this position</param>
            <returns>
            Count of attacker
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumTheseAttackPos(System.Collections.Generic.List{System.Byte},System.Int32[],SrcChess2.ChessBoard.PieceE)">
            <summary>
            Enumerates the attacking position using an array of possible position and one possible enemy piece
            </summary>
            <param name="arrAttackPos">     Array to fill with the attacking position. Can be null if only the count is wanted</param>
            <param name="piCaseMoveList">   Array of position.</param>
            <param name="ePiece">           Piece which can possibly attack this position</param>
            <returns>
            Count of attacker
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumAttackPos(SrcChess2.ChessBoard.PlayerColorE,System.Int32,System.Collections.Generic.List{System.Byte})">
            <summary>
            Enumerates all position which can attack a given position
            </summary>
            <param name="ePlayerColor">     Position to check for black or white</param>
            <param name="iPos">             Position to check.</param>
            <param name="arrAttackPos">     Array to fill with the attacking position. Can be null if only the count is wanted</param>
            <returns>
            Count of attacker
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.IsCheck(SrcChess2.ChessBoard.PlayerColorE,System.Int32)">
            <summary>
            Determine if the specified king is attacked
            </summary>
            <param name="eColor">           King's color to check</param>
            <param name="iKingPos">         Position of the king</param>
            <returns>
            true if in check
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.IsCheck(SrcChess2.ChessBoard.PlayerColorE)">
            <summary>
            Determine if the specified king is attacked
            </summary>
            <param name="eColor">           King's color to check</param>
            <returns>
            true if in check
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.Points(SrcChess2.SearchEngine.SearchMode,SrcChess2.ChessBoard.PlayerColorE,System.Int32,System.Int32,SrcChess2.ChessBoard.PosInfoS,SrcChess2.ChessBoard.PosInfoS)">
            <summary>
            Evaluates a board. The number of point is greater than 0 if white is in advantage, less than 0 if black is.
            </summary>
            <param name="searchMode">       Search mode</param>
            <param name="ePlayerToPlay">    Color of the player to play</param>
            <param name="iDepth">           Depth of the search</param>
            <param name="iMoveCountDelta">  White move count - Black move count</param>
            <param name="posInfoWhite">     Information about pieces attack</param>
            <param name="posInfoBlack">     Information about pieces attack</param>
            <returns>
            Number of points for the current board
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.AddIfNotCheck(SrcChess2.ChessBoard.PlayerColorE,System.Int32,System.Int32,SrcChess2.ChessBoard.MoveTypeE,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS})">
            <summary>
            Add a move to the move list if the move doesn't provokes the king to be attacked.
            </summary>
            <param name="ePlayerColor">     Color doing the the move</param>
            <param name="iStartPos">        Starting position</param>
            <param name="iEndPos">          Ending position</param>
            <param name="eType">            type of the move</param>
            <param name="arrMovePos">       List of move</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.AddPawnPromotionIfNotCheck(SrcChess2.ChessBoard.PlayerColorE,System.Int32,System.Int32,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS})">
            <summary>
            Add a pawn promotion series of moves to the move list if the move doesn't provokes the king to be attacked.
            </summary>
            <param name="ePlayerColor">     Color doing the the move</param>
            <param name="iStartPos">        Starting position</param>
            <param name="iEndPos">          Ending position</param>
            <param name="arrMovePos">       List of move</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.AddMoveIfEnemyOrEmpty(SrcChess2.ChessBoard.PlayerColorE,System.Int32,System.Int32,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS})">
            <summary>
            Add a move to the move list if the new position is empty or is an enemy
            </summary>
            <param name="ePlayerColor">     Color doing the the move</param>
            <param name="iStartPos">        Starting position</param>
            <param name="iEndPos">          Ending position</param>
            <param name="arrMovePos">       List of move</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumCastleMove(SrcChess2.ChessBoard.PlayerColorE,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS})">
            <summary>
            Enumerates the castling move
            </summary>
            <param name="ePlayerColor"> Color doing the the move</param>
            <param name="arrMovePos">   List of move</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumPawnMove(SrcChess2.ChessBoard.PlayerColorE,System.Int32,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS})">
            <summary>
            Enumerates the move a specified pawn can do
            </summary>
            <param name="ePlayerColor">     Color doing the the move</param>
            <param name="iStartPos">        Pawn position</param>
            <param name="arrMovePos">       List of move</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumEnPassant(SrcChess2.ChessBoard.PlayerColorE,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS})">
            <summary>
            Enumerates the en passant move
            </summary>
            <param name="ePlayerColor">     Color doing the the move</param>
            <param name="arrMovePos">       List of move</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumFromArray(SrcChess2.ChessBoard.PlayerColorE,System.Int32,System.Int32[][],System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS})">
            <summary>
            Enumerates the move a specified piece can do using the pre-compute move array
            </summary>
            <param name="ePlayerColor">             Color doing the the move</param>
            <param name="iStartPos">                Starting position</param>
            <param name="ppiMoveListForThisCase">   Array of array of possible moves</param>
            <param name="arrMovePos">               List of move</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumFromArray(SrcChess2.ChessBoard.PlayerColorE,System.Int32,System.Int32[],System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS})">
            <summary>
            Enumerates the move a specified piece can do using the pre-compute move array
            </summary>
            <param name="ePlayerColor">             Color doing the the move</param>
            <param name="iStartPos">                Starting position</param>
            <param name="piMoveListForThisCase">    Array of possible moves</param>
            <param name="arrMovePos">               List of move</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumMoveList(SrcChess2.ChessBoard.PlayerColorE,System.Boolean,SrcChess2.ChessBoard.PosInfoS@)">
            <summary>
            Enumerates all the possible moves for a player
            </summary>
            <param name="ePlayerColor">             Color doing the the move</param>
            <param name="bMoveList">                true to returns a MoveList</param>
            <param name="posInfo">                  Structure to fill with pieces information</param>
            <returns>
            List of possible moves or null
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.EnumMoveList(SrcChess2.ChessBoard.PlayerColorE)">
            <summary>
            Enumerates all the possible moves for a player
            </summary>
            <param name="ePlayerColor">             Color doing the the move</param>
            <returns>
            List of possible moves
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.ComputePiecesCoverage(SrcChess2.ChessBoard.PlayerColorE,SrcChess2.ChessBoard.PosInfoS@)">
            <summary>
            Enumerates all the possible moves for a player
            </summary>
            <param name="ePlayerColor">             Color doing the the move</param>
            <param name="posInfo">                  Structure to fill with pieces information</param>
        </member>
        <member name="M:SrcChess2.ChessBoard.CancelSearch">
            <summary>
            Cancel search
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.FindBestMove(SrcChess2.SearchEngine.SearchMode,SrcChess2.ChessBoard.PlayerColorE,SrcChess2.ChessBoard.MovePosS@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Find the best move for a player using alpha-beta pruning or minmax search
            </summary>
            <param name="searchMode">       Search mode</param>
            <param name="ePlayerColor">     Color doing the move</param>
            <param name="moveBest">         Best move found</param>
            <param name="iPermCount">       Total permutation evaluated</param>
            <param name="iCacheHit">        Number of moves found in the translation table cache</param>
            <param name="iMaxDepth">        Maximum depth reached</param>
            <returns>
            true if a move has been found
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.FindValidPawnPromotion(SrcChess2.ChessBoard.PlayerColorE,System.Int32,System.Int32)">
            <summary>
            Find type of pawn promotion are valid for the specified starting/ending position
            </summary>
            <param name="ePlayerColor">     Color doing the move</param>
            <param name="iStartPos">        Position to start</param>
            <param name="iEndPos">          Ending position</param>
            <returns>
            None or a combination of Queen, Rook, Bishop, Knight and Pawn
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.FindIfValid(SrcChess2.ChessBoard.PlayerColorE,System.Int32,System.Int32)">
            <summary>
            Find a move from the valid move list
            </summary>
            <param name="ePlayerColor">     Color doing the move</param>
            <param name="iStartPos">        Position to start</param>
            <param name="iEndPos">          Ending position</param>
            <returns>
            Move or -1
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.FindBookMove(SrcChess2.SearchEngine.SearchMode,SrcChess2.ChessBoard.PlayerColorE,SrcChess2.ChessBoard.MovePosS[],SrcChess2.ChessBoard.MovePosS@)">
            <summary>
            Find a move from the opening book
            </summary>
            <param name="searchMode">       Search mode</param>
            <param name="ePlayerColor">     Color doing the move</param>
            <param name="arrPrevMove">      Previous move</param>
            <param name="move">             Found move</param>
            <returns>
            true if succeed, false if no move found in book
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.UndoAllMoves">
            <summary>
            Undo all the specified move starting with the last move
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.GetHumanPos(System.Int32)">
            <summary>
            Gets the position express in a human form
            </summary>
            <param name="iPos">     Position</param>
            <returns>
            Human form position
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.GetHumanPos(SrcChess2.ChessBoard.MovePosS)">
            <summary>
            Gets the position express in a human form
            </summary>
            <param name="move">     Move</param>
            <returns>
            Human form position
            </returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.ForPrintoFigure(System.Int32)">
            <summary>
            
            </summary>
            <param name="k"></param>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.NotationMove(System.Byte)">
            <summary>
            Строчный вывод в обычной нотации из цифрового обозначения клетки
            Заложено 26 июля 2014 года
            </summary>
            <param name="tzifra">цифровое обозначение клетки</param>
            <returns>текстовое обозначение</returns>
        </member>
        <member name="M:SrcChess2.ChessBoard.FiguraRussian(SrcChess2.ChessBoard.PieceE)">
            <summary>
            Строчный вывод наименования фигуры
            Заложено 26 июля 2014 года
            </summary>
            <param name="ina">Внутренний тип обозначения фигуры</param>
            <returns>Русскоязычное наименование</returns>
        </member>
        <member name="P:SrcChess2.ChessBoard.MovePosStack">
            <summary>
            Stack of all moves done since initial board
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoard.DesignMode">
            <summary>
            Determine if the board is in design mode
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoard.StandardInitialBoard">
            <summary>
            true if the board is standard, false if initialized from design mode or FEN
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoard.CurrentZobristKey">
            <summary>
            Current Zobrist key value
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoard.NextMoveColor">
            <summary>
            Next moving color
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoard.CurrentMoveColor">
            <summary>
            Current moving color
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoard.Item(System.Int32)">
            <summary>
            Get a piece at the specified position. Position 0 = Lower right (H1), 63 = Higher left (A8)
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoard.WhitePieceCount">
            <summary>
            Gets the number of white pieces on the board
            </summary>
        </member>
        <member name="P:SrcChess2.ChessBoard.BlackPieceCount">
            <summary>
            Gets the number of black pieces on the board
            </summary>
        </member>
        <member name="T:SrcChess2.ChessBoard.PlayerColorE">
            <summary>Player color (black and white)</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PlayerColorE.White">
            <summary>White player</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PlayerColorE.Black">
            <summary>Black player</summary>
        </member>
        <member name="T:SrcChess2.ChessBoard.PieceE">
            <summary>Value of each piece on the board. Each piece is a combination of piece value and color (0 for white, 8 for black)</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.None">
            <summary>No piece</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.Pawn">
            <summary>Pawn</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.Knight">
            <summary>Knight</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.Bishop">
            <summary>Bishop</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.Rook">
            <summary>Rook</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.Queen">
            <summary>Queen</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.King">
            <summary>King</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.PieceMask">
            <summary>Mask to find the piece</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.Black">
            <summary>Piece is black</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PieceE.White">
            <summary>White piece</summary>
        </member>
        <member name="T:SrcChess2.ChessBoard.ValidPawnPromotionE">
            <summary>List of valid pawn promotion</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.ValidPawnPromotionE.None">
            <summary>No valid promotion</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.ValidPawnPromotionE.Queen">
            <summary>Promotion to queen</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.ValidPawnPromotionE.Rook">
            <summary>Promotion to rook</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.ValidPawnPromotionE.Bishop">
            <summary>Promotion to bishop</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.ValidPawnPromotionE.Knight">
            <summary>Promotion to knight</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.ValidPawnPromotionE.Pawn">
            <summary>Promotion to pawn</summary>
        </member>
        <member name="T:SrcChess2.ChessBoard.BoardStateMaskE">
            <summary>Mask for board extra info</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.BoardStateMaskE.EnPassant">
            <summary>0-63 to express the EnPassant possible position</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.BoardStateMaskE.BlackToMove">
            <summary>black player is next to move</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.BoardStateMaskE.WLCastling">
            <summary>white left castling is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.BoardStateMaskE.WRCastling">
            <summary>white right castling is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.BoardStateMaskE.BLCastling">
            <summary>black left castling is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.BoardStateMaskE.BRCastling">
            <summary>black right castling is possible</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.BoardStateMaskE.BoardRepMask">
            <summary>Mask use to save the number of times the board has been repeated</summary>
        </member>
        <member name="T:SrcChess2.ChessBoard.RepeatResultE">
            <summary>Any repetition causing a draw?</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.RepeatResultE.NoRepeat">
            <summary>No repetition found</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.RepeatResultE.ThreeFoldRepeat">
            <summary>3 times the same board</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.RepeatResultE.FiftyRuleRepeat">
            <summary>50 times without moving a pawn or eating a piece</summary>
        </member>
        <member name="T:SrcChess2.ChessBoard.MoveResultE">
            <summary>Result of a move</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveResultE.NoRepeat">
            <summary>No repetition found</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveResultE.ThreeFoldRepeat">
            <summary>3 times the same board</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveResultE.FiftyRuleRepeat">
            <summary>50 times without moving a pawn or eating a piece</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveResultE.TieNoMove">
            <summary>No more move for the next player</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveResultE.TieNoMatePossible">
            <summary>Not enough pieces to do a check mate</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveResultE.Check">
            <summary>Check</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveResultE.Mate">
            <summary>Checkmate</summary>
        </member>
        <member name="T:SrcChess2.ChessBoard.MoveTypeE">
            <summary>Type of possible move</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveTypeE.Normal">
            <summary>Normal move</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveTypeE.PawnPromotionToQueen">
            <summary>Pawn which is promoted to a queen</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveTypeE.Castle">
            <summary>Castling</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveTypeE.EnPassant">
            <summary>Prise en passant</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveTypeE.PawnPromotionToRook">
            <summary>Pawn which is promoted to a rook</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveTypeE.PawnPromotionToBishop">
            <summary>Pawn which is promoted to a bishop</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveTypeE.PawnPromotionToKnight">
            <summary>Pawn which is promoted to a knight</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveTypeE.PawnPromotionToPawn">
            <summary>Pawn which is promoted to a pawn</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveTypeE.MoveTypeMask">
            <summary>Piece type mask</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveTypeE.PieceEaten">
            <summary>The move eat a piece</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MoveTypeE.MoveFromBook">
            <summary>Move coming from book opening</summary>
        </member>
        <member name="T:SrcChess2.ChessBoard.MovePosS">
            <summary>Структура для хранения информации о единичном ходе</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MovePosS.OriginalPiece">
            <summary>Пустота, либо фигура, которая будет съедена в результате данного хода</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MovePosS.StartPos">
            <summary>Откуда ходят (0-63)</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MovePosS.EndPos">
            <summary>Куда ходят (0-63)</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.MovePosS.Type">
            <summary>Тип хода</summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.MovePosS.ToString">
            <summary>
            Переопределение стандарта для отладки
            Заложено 26 июля 2014 года
            Изменено 28 июля 2014 года
            </summary>
            <returns>Строка для рускоязычного понимания</returns>
        </member>
        <member name="T:SrcChess2.ChessBoard.PosInfoS">
            <summary>
            Position information. Positive value for white player, negative value for black player.
            All these informations are computed before the last move to improve performance.
            </summary>
        </member>
        <member name="M:SrcChess2.ChessBoard.PosInfoS.#ctor(System.Int32,System.Int32)">
            <summary>
            Class Ctor
            </summary>
            <param name="iAttackedPieces">  Number of pieces attacking this position</param>
            <param name="iPiecesDefending"> Number of pieces defending this position</param>
        </member>
        <member name="F:SrcChess2.ChessBoard.PosInfoS.m_iAttackedPieces">
            <summary>Number of pieces being attacked by player's pieces</summary>
        </member>
        <member name="F:SrcChess2.ChessBoard.PosInfoS.m_iPiecesDefending">
            <summary>Number of pieces defending player's pieces</summary>
        </member>
        <member name="T:SrcChess2.ChessException">
            <summary>Chess exception</summary>
        </member>
        <member name="M:SrcChess2.ChessException.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:SrcChess2.ChessException.#ctor(System.String)">
            <summary>
            Class constructor
            </summary>
            <param name="strError"> Error</param>
        </member>
        <member name="M:SrcChess2.ChessException.#ctor(System.String,System.Exception)">
            <summary>
            Class constructor
            </summary>
            <param name="strError"> Error</param>
            <param name="ex">       Inner exception</param>
        </member>
        <member name="M:SrcChess2.ChessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialization Ctor
            </summary>
            <param name="info">     Serialization info</param>
            <param name="context">  Streaming context</param>
        </member>
        <member name="T:SrcChess2.ZobristKey">
            <summary>
            Zobrist key implementation.
            </summary>
        </member>
        <member name="F:SrcChess2.ZobristKey.s_pi64RndTable">
            <summary>Random value for each piece/position</summary>
        </member>
        <member name="M:SrcChess2.ZobristKey.#cctor">
            <summary>
            Static constructor. Use to create the random value for each case of the board.
            </summary>
        </member>
        <member name="M:SrcChess2.ZobristKey.UpdateZobristKey(System.Int64,System.Int32,SrcChess2.ChessBoard.PieceE,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Update the Zobrist key using the specified move
            </summary>
            <param name="i64ZobristKey">Zobrist key</param>
            <param name="iPos">         Piece position</param>
            <param name="eOldPiece">    Old value</param>
            <param name="eNewPiece">    New value</param>
        </member>
        <member name="M:SrcChess2.ZobristKey.UpdateZobristKey(System.Int64,System.Int32,SrcChess2.ChessBoard.PieceE,SrcChess2.ChessBoard.PieceE,System.Int32,SrcChess2.ChessBoard.PieceE,SrcChess2.ChessBoard.PieceE)">
            <summary>
            Update the Zobrist key using the specified move
            </summary>
            <param name="i64ZobristKey">Zobrist key</param>
            <param name="iPos1">        Piece position</param>
            <param name="eOldPiece1">   Old value</param>
            <param name="eNewPiece1">   New value</param>
            <param name="iPos2">        Piece position</param>
            <param name="eOldPiece2">   Old value</param>
            <param name="eNewPiece2">   New value</param>
        </member>
        <member name="M:SrcChess2.ZobristKey.ComputeBoardZobristKey(SrcChess2.ChessBoard.PieceE[])">
            <summary>
            Compute the zobrist key for a board
            </summary>
            <param name="peBoard">      Board</param>
        </member>
        <member name="T:SrcChess2.MovePosStack">
            <summary>Maintains the list of moves which has been done on a board. The undo moves are kept up to when a new move is done.</summary>
        </member>
        <member name="F:SrcChess2.MovePosStack.m_listMovePos">
            <summary>List of move position</summary>
        </member>
        <member name="F:SrcChess2.MovePosStack.m_iPosInList">
            <summary>Position of the current move in the list</summary>
        </member>
        <member name="M:SrcChess2.MovePosStack.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:SrcChess2.MovePosStack.#ctor(SrcChess2.MovePosStack)">
            <summary>
            Class constructor (copy constructor)
            </summary>
        </member>
        <member name="M:SrcChess2.MovePosStack.Clone">
            <summary>
            Clone the stack
            </summary>
            <returns>
            Move list
            </returns>
        </member>
        <member name="M:SrcChess2.MovePosStack.SaveToWriter(System.IO.BinaryWriter)">
            <summary>
            Save to the specified binary writer
            </summary>
            <param name="writer">   Binary writer</param>
        </member>
        <member name="M:SrcChess2.MovePosStack.LoadFromReader(System.IO.BinaryReader)">
            <summary>
            Load from reader
            </summary>
            <param name="reader">   Binary Reader</param>
        </member>
        <member name="M:SrcChess2.MovePosStack.AddMove(SrcChess2.ChessBoard.MovePosS)">
            <summary>
            Add a move to the stack. All redo move are discarded
            </summary>
            <param name="movePos">  New move</param>
        </member>
        <member name="M:SrcChess2.MovePosStack.MoveToNext">
            <summary>
            Move to next move
            </summary>
        </member>
        <member name="M:SrcChess2.MovePosStack.MoveToPrevious">
            <summary>
            Move to previous move
            </summary>
        </member>
        <member name="M:SrcChess2.MovePosStack.Clear">
            <summary>
            Removes all move in the list
            </summary>
        </member>
        <member name="P:SrcChess2.MovePosStack.Count">
            <summary>
            Count
            </summary>
        </member>
        <member name="P:SrcChess2.MovePosStack.Item(System.Int32)">
            <summary>
            Indexer
            </summary>
        </member>
        <member name="P:SrcChess2.MovePosStack.List">
            <summary>
            Get the list of moves
            </summary>
        </member>
        <member name="P:SrcChess2.MovePosStack.CurrentMove">
            <summary>
            Current move (last done move)
            </summary>
        </member>
        <member name="P:SrcChess2.MovePosStack.NextMove">
            <summary>
            Next move in the redo list
            </summary>
        </member>
        <member name="P:SrcChess2.MovePosStack.PositionInList">
            <summary>
            Current move index
            </summary>
        </member>
        <member name="T:SrcChess2.frmSearchMode">
            <summary>
            Ask user about search mode
            </summary>
            <summary>
            frmSearchMode
            </summary>
        </member>
        <member name="F:SrcChess2.frmSearchMode.m_searchMode">
            <summary>Source search mode object</summary>
        </member>
        <member name="F:SrcChess2.frmSearchMode.m_boardEvalUtil">
            <summary>Board evaluation utility class</summary>
        </member>
        <member name="M:SrcChess2.frmSearchMode.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmSearchMode.#ctor(SrcChess2.SearchEngine.SearchMode,SrcChess2.BoardEvaluationUtil)">
            <summary>
            Class constructor
            </summary>
            <param name="searchMode">       Actual search mode</param>
            <param name="boardEvalUtil">    Board Evaluation list</param>
        </member>
        <member name="M:SrcChess2.frmSearchMode.radioButtonAlphaBeta_CheckedChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when radioButtonAlphaBeta checked state has been changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmSearchMode.SetPlyAvgTimeState">
            <summary>
            Set the plyCount/avgTime control state
            </summary>
        </member>
        <member name="M:SrcChess2.frmSearchMode.radioButtonSearchType_CheckedChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when radioButtonFixDepth checked state has been changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmSearchMode.textBoxTimeInSec_TextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Called when the time in second textbox changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmSearchMode.textBoxTransSize_TextChanged(System.Object,System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Called when the transposition table size is changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmSearchMode.UpdateSearchMode">
            <summary>
            Update the SearchMode object
            </summary>
        </member>
        <member name="M:SrcChess2.frmSearchMode.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Ok button is clicked
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmSearchMode.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.frmQueryPawnPromotionType">
            <summary>
            Ask user for the to pawn promotion piece
            </summary>
            <summary>
            frmQueryPawnPromotionType
            </summary>
        </member>
        <member name="F:SrcChess2.frmQueryPawnPromotionType.m_eValidPawnPromotion">
            <summary>Pawn Promotion Piece</summary>
        </member>
        <member name="M:SrcChess2.frmQueryPawnPromotionType.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmQueryPawnPromotionType.#ctor(SrcChess2.ChessBoard.ValidPawnPromotionE)">
            <summary>
            Class constructor
            </summary>
            <param name="eValidPawnPromotion">  The valid pawn promotion type</param>
        </member>
        <member name="M:SrcChess2.frmQueryPawnPromotionType.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Ok button is clicked
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event Parameter</param>
        </member>
        <member name="M:SrcChess2.frmQueryPawnPromotionType.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:SrcChess2.frmQueryPawnPromotionType.PromotionType">
            <summary>
            Get the pawn promotion type
            </summary>
        </member>
        <member name="T:SrcChess2.App">
            <summary>
            Interaction logic for App.xaml
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:SrcChess2.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:SrcChess2.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:SrcChess2.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:SrcChess2.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:SrcChess2.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:SrcChess2.MainWindow">
            <summary>
            Interaction logic for MainWindow.xaml
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="F:SrcChess2.MainWindow.NewGameCommand">
            <summary>Command: New Game</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.LoadGameCommand">
            <summary>Command: Load Game</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.CreateGameCommand">
            <summary>Command: Create Game</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.SaveGameCommand">
            <summary>Command: Save Game</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.SaveGameInPGNCommand">
            <summary>Command: Save Game in PGN</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.QuitCommand">
            <summary>Command: Quit</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.HintCommand">
            <summary>Command: Hint</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.UndoCommand">
            <summary>Command: Undo</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.RedoCommand">
            <summary>Command: Redo</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.RevertBoardCommand">
            <summary>Command: Revert Board</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.PlayerAgainstPlayerCommand">
            <summary>Command: Player Against Player</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.AutomaticPlayCommand">
            <summary>Command: Automatic Play</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.FastAutomaticPlayCommand">
            <summary>Command: Fast Automatic Play</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.CancelPlayCommand">
            <summary>Command: Cancel Play</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.DesignModeCommand">
            <summary>Command: Design Mode</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.SearchModeCommand">
            <summary>Command: Search Mode</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.FlashPieceCommand">
            <summary>Command: Flash Piece</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.PGNNotationCommand">
            <summary>Command: PGN Notation</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.BoardSettingCommand">
            <summary>Command: Board Settings</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.CreateBookCommand">
            <summary>Command: Create a Book</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.FilterPGNFileCommand">
            <summary>Command: Filter a PGN File</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.TestBoardEvaluationCommand">
            <summary>Command: Test Board Evaluation</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.AboutCommand">
            <summary>Command: Test Board Evaluation</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_arrCommands">
            <summary>List of all supported commands</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_ePlayingMode">
            <summary>Playing mode (player vs player, player vs computer, computer vs computer</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_eComputerPlayingColor">
            <summary>Color played by the computer</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_bSecondThreadBusy">
            <summary>true if a secondary thread is busy computing a move</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_searchMode">
            <summary>Search mode</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_boardEvalUtil">
            <summary>Utility class to handle board evaluation objects</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_listPieceSet">
            <summary>List of piece sets</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_pieceSet">
            <summary>Currently selected piece set</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_colorBackground">
            <summary>Color use to create the background brush</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.m_dispatcherTimer">
            <summary>Dispatcher timer</summary>
        </member>
        <member name="M:SrcChess2.MainWindow.#cctor">
            <summary>
            Static Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.SetSearchModeFromSetting(SrcChess2.Properties.Settings)">
            <summary>
            Set the searching mode using the specified setting
            </summary>
            <param name="settings"> User setting</param>
        </member>
        <member name="M:SrcChess2.MainWindow.NameToColor(System.String)">
            <summary>
            Convert a color name to a color
            </summary>
            <param name="strName">  Name of the color or hexa representation of the color</param>
            <returns>
            Color
            </returns>
        </member>
        <member name="M:SrcChess2.MainWindow.OnExecutedCmd(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            Executes the specified command
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Routed event argument</param>
        </member>
        <member name="M:SrcChess2.MainWindow.OnCanExecuteCmd(System.Object,System.Windows.Input.CanExecuteRoutedEventArgs)">
            <summary>
            Determine if a command can be executed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Routed event argument</param>
        </member>
        <member name="M:SrcChess2.MainWindow.SetPlayingMode(SrcChess2.MainWindow.PlayingModeE)">
            <summary>
            Set the current playing mode. Defined as a method so it can be called by a delegate
            </summary>
            <param name="ePlayingMode"> Playing mode</param>
        </member>
        <member name="M:SrcChess2.MainWindow.StartAsyncComputing">
            <summary>
            Start asynchronous computing
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.ShowMoveInStatusBar(SrcChess2.ChessBoard.PlayerColorE,SrcChess2.ChessBoard.MovePosS,System.Int32,System.Int32,System.Int32)">
            <summary>
            Show a move in status bar
            </summary>
            <param name="ePlayerColor"> Color of the move</param>
            <param name="move">         Move</param>
            <param name="iPermCount">   Permutation analyzed. 0 for none. -1 for book</param>
            <param name="iDepth">       Depth of the search (-1 if none)</param>
            <param name="iCacheHit">    Nb of permutation found in the translation table</param>
        </member>
        <member name="M:SrcChess2.MainWindow.ShowSearchMode">
            <summary>
            Show the current searching parameters in the status bar
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.SrcChess2#ChessBoardControl#IMoveListUI#Reset(SrcChess2.ChessBoard)">
            <summary>
            Remove all moves from the list
            </summary>
            <param name="chessBoard">       Starting chess board</param>
        </member>
        <member name="M:SrcChess2.MainWindow.SrcChess2#ChessBoardControl#IMoveListUI#NewMoveDone(System.Int32,System.Int32,System.Int32)">
            <summary>
            Append a new move to the list
            </summary>
            <param name="iPermCount">   Permutation analyzed. 0 for none. -1 for book</param>
            <param name="iDepth">       Depth</param>
            <param name="iCacheHit">    Nb of permutation found in the translation table</param>
        </member>
        <member name="M:SrcChess2.MainWindow.SrcChess2#ChessBoardControl#IMoveListUI#RedoPosChanged">
            <summary>
            Remove the last move from the list
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.DisplayMessage(SrcChess2.ChessBoard.MoveResultE,SrcChess2.MainWindow.MessageModeE)">
            <summary>
            Display a message related to the MoveStateE
            </summary>
            <param name="eMoveResult">  Move result</param>
            <param name="eMessageMode"> Message mode</param>
            <returns>
            true if it's the end of the game. false if not
            </returns>
        </member>
        <member name="M:SrcChess2.MainWindow.m_moveViewer_NewMoveSelected(System.Object,SrcChess2.MoveViewer.NewMoveSelectedEventArg)">
            <summary>
            Called when a move is selected from the MoveViewer
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event handler</param>
        </member>
        <member name="M:SrcChess2.MainWindow.m_chessCtl_UpdateCmdState(System.Object,System.EventArgs)">
            <summary>
            Called when the state of the commands need to be refreshed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event handler</param>
        </member>
        <member name="M:SrcChess2.MainWindow.ResetBoard">
            <summary>
            Reset the board.
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.SetCmdState">
            <summary>
            Determine which menu item is enabled
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.UnlockBoard">
            <summary>
            Unlock the chess board when asynchronous computing is finished
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.PlayComputerMove(System.Boolean,SrcChess2.MainWindow.MessageModeE,SrcChess2.ChessBoard.MovePosS,System.Int32,System.Int32,System.Int32,SrcChess2.MainWindow.ComputerPlayingStat)">
            <summary>
            Play the computer move found by the search.
            </summary>
            <param name="bFlash">       true to flash moving position</param>
            <param name="eMessageMode"> Which message to show</param>
            <param name="move">         Best move</param>
            <param name="iPermCount">   Permutation count</param>
            <param name="iDepth">       Depth of the search</param>
            <param name="iCacheHit">    Number of moves found in the translation table cache</param>
            <param name="stat">         Playing stat. Can be null</param>
            <returns>
            true if end of game, false if not
            </returns>
        </member>
        <member name="M:SrcChess2.MainWindow.PlayComputerAsync(System.Boolean,SrcChess2.SearchEngine.SearchMode)">
            <summary>
            Computer play a move. Can be called asynchronously by a secondary thread.
            </summary>
            <param name="bFlash">           true to use flash when moving pieces</param>
            <param name="searchMode">       Search mode</param>
        </member>
        <member name="M:SrcChess2.MainWindow.PlayComputer(System.Boolean,System.Boolean)">
            <summary>
            Computer find a best move and play it. If the book can be find in the opening book,
            the move is played directly. If not, the best move is found and played from a 
            secondary thread (if option is enabled).
            </summary>
            <param name="bFlash">           true to flash moving position</param>
            <param name="bSilent">          true to be silent up to the end of the game</param>
            <returns>
            true if computer is able to play, false if not
            </returns>
        </member>
        <member name="M:SrcChess2.MainWindow.PlayComputerAgainstComputerAsync(System.Boolean,SrcChess2.SearchEngine.SearchMode)">
            <summary>
            Let's the computer play against itself. Can be called asynchronously by a secondary thread.
            </summary>
            <param name="bFlash">           true to flash the moving piece</param>
            <param name="searchMode">       Search mode</param>
        </member>
        <member name="M:SrcChess2.MainWindow.PlayComputerAgainstComputer(System.Boolean)">
            <summary>
            Let's the computer play against itself
            </summary>
            <param name="bFlash">           true to flash pieces whem moving</param>
        </member>
        <member name="M:SrcChess2.MainWindow.TestShowResult(System.Int32,SrcChess2.SearchEngine.SearchMode,SrcChess2.MainWindow.ComputerPlayingStat,System.Int32,System.Int32)">
            <summary>
            Show the test result of a computer playing against a computer
            </summary>
            <param name="iGameCount">       Number of games played.</param>
            <param name="searchMode">       Search mode</param>
            <param name="stat">             Statistic.</param>
            <param name="iMethod1Win">      Number of games won by method #1</param>
            <param name="iMethod2Win">      Number of games won by method #2</param>
        </member>
        <member name="M:SrcChess2.MainWindow.TestComputerAgainstComputerAsync(System.Int32,SrcChess2.SearchEngine.SearchMode)">
            <summary>
            Tests the computer playing against itself. Can be called asynchronously by a secondary thread.
            </summary>
            <param name="iGameCount">       Number of games to play.</param>
            <param name="searchMode">       Search mode</param>
        </member>
        <member name="M:SrcChess2.MainWindow.TestComputerAgainstComputer(System.Int32,SrcChess2.SearchEngine.SearchMode)">
            <summary>
            Test the computer play against itself
            </summary>
            <param name="iGameCount">   Number of games to play</param>
            <param name="searchMode">   Searching mode</param>
        </member>
        <member name="M:SrcChess2.MainWindow.ShowHintMove(SrcChess2.ChessBoard.MovePosS,System.Int32,System.Int32,System.Int32)">
            <summary>
            Flash a hint
            </summary>
            <param name="move">         Move to show</param>
            <param name="iPermCount">   Permutation count</param>
            <param name="iDepth">       Search depth</param>
            <param name="iCacheHit">    Cache hit</param>
        </member>
        <member name="M:SrcChess2.MainWindow.ShowHintAsync(SrcChess2.SearchEngine.SearchMode)">
            <summary>
            Show a hint. Can be called asynchronously by a secondary thread.
            </summary>
            <param name="searchMode">       Search mode</param>
        </member>
        <member name="M:SrcChess2.MainWindow.ShowHint">
            <summary>
            Show a hint
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.Undo(System.Boolean)">
            <summary>
            Undo a user and computer move
            </summary>
            <param name="bPlayerAgainstComputer">   true if playing against computer</param>
        </member>
        <member name="M:SrcChess2.MainWindow.RedoMove(System.Boolean)">
            <summary>
            Redo a user and computer move
            </summary>
            <param name="bPlayerAgainstComputer">   true if playing against computer</param>
            <returns>
            NoRepeat, FiftyRuleRepeat, ThreeFoldRepeat, Tie, Check, Mate
            </returns>
        </member>
        <member name="M:SrcChess2.MainWindow.CheckIfComputerMustPlay">
            <summary>
            Check if it's the computer time to move
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.m_chessCtl_MoveSelected(System.Object,SrcChess2.ChessBoardControl.MoveSelectedEventArgs)">
            <summary>
            Called when the user has selected a valid move
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event handler</param>
        </member>
        <member name="M:SrcChess2.MainWindow.ToggleDesignMode">
            <summary>
            Toggle the design mode. In design mode, the user can create its own board
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.m_chessCtl_QueryPiece(System.Object,SrcChess2.ChessBoardControl.QueryPieceEventArgs)">
            <summary>
            Called to gets the selected piece for design mode
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event handler</param>
        </member>
        <member name="M:SrcChess2.MainWindow.m_chessCtl_QueryPawnPromotionType(System.Object,SrcChess2.ChessBoardControl.QueryPawnPromotionTypeEventArgs)">
            <summary>
            Called to gets the type of pawn promotion for the current move
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event handler</param>
        </member>
        <member name="M:SrcChess2.MainWindow.NewGame">
            <summary>
            Called when the game need to be reinitialized
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.Redo">
            <summary>
            Redo the last undone move
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.LoadGame">
            <summary>
            Load a board
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.CreateGame">
            <summary>
            Creates a game from a PGN text
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.CancelAutoPlay">
            <summary>
            Cancel the auto-play
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.TogglePlayerAgainstPlayer">
            <summary>
            Toggle the player vs player mode.
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.RevertBoard">
            <summary>
            Revert the board so the computer play the actual user pieces
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.FilterPGNFile">
            <summary>
            Filter the content of a PGN file
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.ShowAbout">
            <summary>
            Show the About Dialog Box
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.SetSearchMode">
            <summary>
            Specifies the search mode
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.TestBoardEvaluation">
            <summary>
            Test board evaluation routine
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.dispatcherTimer_Tick(System.Object,System.EventArgs)">
            <summary>
            Called each second for timer click
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event handler</param>
        </member>
        <member name="M:SrcChess2.MainWindow.TogglePGNNotation">
            <summary>
            Toggle PGN/Move notation
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.ToggleFlashPiece">
            <summary>
            Toggle Flash piece
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.ChooseBoardSetting">
            <summary>
            Choose board setting
            </summary>
        </member>
        <member name="M:SrcChess2.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:SrcChess2.MainWindow.PieceSet">
            <summary>
            Used piece set
            </summary>
        </member>
        <member name="P:SrcChess2.MainWindow.PlayingMode">
            <summary>
            Current playing mode (player vs player, player vs computer or computer vs computer)
            </summary>
        </member>
        <member name="T:SrcChess2.MainWindow.ComputerPlayingStat">
            <summary>Getting computer against computer playing statistic</summary>
        </member>
        <member name="T:SrcChess2.MainWindow.MessageModeE">
            <summary>Use for computer move</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.MessageModeE.Silent">
            <summary>No message</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.MessageModeE.CallEndGame">
            <summary>Only messages for move which are terminating the game</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.MessageModeE.Verbose">
            <summary>All messages</summary>
        </member>
        <member name="T:SrcChess2.MainWindow.PlayingModeE">
            <summary>Current playing mode</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.PlayingModeE.PlayerAgainstPlayer">
            <summary>Player plays against another player</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.PlayingModeE.PlayerAgainstComputer">
            <summary>Player plays against computer</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.PlayingModeE.ComputerAgainstComputer">
            <summary>Computer play against computer</summary>
        </member>
        <member name="F:SrcChess2.MainWindow.PlayingModeE.DesignMode">
            <summary>Design mode.</summary>
        </member>
        <member name="T:SrcChess2.Book">
            <summary>Handle the book opening.</summary>
        </member>
        <member name="F:SrcChess2.Book.m_bookEntries">
            <summary>List of book entries</summary>
        </member>
        <member name="M:SrcChess2.Book.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:SrcChess2.Book.ComputeWeight(System.Int32)">
            <summary>
            Compute the number of child for each child moves
            </summary>
            <param name="iParent">  Parent move</param>
            <returns>
            Nb of child
            </returns>
        </member>
        <member name="M:SrcChess2.Book.ComputeWeight">
            <summary>
            Compute the number of child for each child moves
            </summary>
        </member>
        <member name="M:SrcChess2.Book.ReadBookFromReader(System.IO.BinaryReader)">
            <summary>
            Read the book from a binary file
            </summary>
        </member>
        <member name="M:SrcChess2.Book.ReadBookFromFile(System.String)">
            <summary>
            Read the book from a binary file
            </summary>
            <param name="strFileName">  File Name</param>
        </member>
        <member name="M:SrcChess2.Book.ReadBookFromResource(System.Reflection.Assembly,System.String)">
            <summary>
            Read the book from the specified resource
            </summary>
            <param name="asm">          Assembly</param>
            <param name="strResName">   Resource Name</param>
        </member>
        <member name="M:SrcChess2.Book.ReadBookFromResource(System.String)">
            <summary>
            Read the book from the specified resource
            </summary>
            <param name="strResName">   Resource Name</param>
        </member>
        <member name="M:SrcChess2.Book.SaveBookToFile(System.String)">
            <summary>
            Save the book to a binary file
            </summary>
        </member>
        <member name="M:SrcChess2.Book.FindMoveInBook(SrcChess2.ChessBoard.MovePosS[],System.Random)">
            <summary>
            Find a move from the book
            </summary>
            <param name="arrPreviousMove">  List of previous moves</param>
            <param name="rnd">              Random to use to pickup a move from a list. Can be null</param>
            <returns>
            Move in the form of StartPos + (EndPos * 256) or -1 if none found
            </returns>
        </member>
        <member name="M:SrcChess2.Book.CompareList(System.Int32[],System.Int32[],System.Int32)">
            <summary>
            Compare the begining of two lists
            </summary>
            <param name="piFirst">      First list</param>
            <param name="piSecond">     Second list</param>
            <param name="iMaxDepth">    Maximum depth to compare</param>
            <returns>
            true if begining is equal
            </returns>
        </member>
        <member name="M:SrcChess2.Book.CompareKey(System.Int32[],System.Collections.Generic.List{System.Int32})">
            <summary>
            Compare a key with a move list
            </summary>
            <param name="piMoveList">   Move list</param>
            <param name="arrKey">       Key to compare</param>
            <returns>
            true if equal
            </returns>
        </member>
        <member name="M:SrcChess2.Book.CreateEntries(System.Collections.Generic.List{System.Int32[]},System.Collections.Generic.List{SrcChess2.Book.BookEntry},System.Collections.Generic.List{System.Int32},System.Int32@,System.Int32)">
            <summary>
            Create entries in the book
            </summary>
            <param name="arrMoveList">  Array of move list</param>
            <param name="arrBookEntry"> Book entry to be filled</param>
            <param name="arrKey">       Current key</param>
            <param name="iPosIndex">    Current position in the list</param>
            <param name="iDepth">       Current depth.</param>
            <returns>
            Nb of entries created
            </returns>
        </member>
        <member name="M:SrcChess2.Book.CreateBookList(System.Collections.Generic.List{System.Int32[]},System.Int32)">
            <summary>
            Create the book entries from a series of move list
            </summary>
            <param name="arrMoveList">      Array of move list</param>
            <param name="iMaxDepth">        Maximum depth of the moves.</param>
            <returns>
            Nb of entries created
            </returns>
        </member>
        <member name="M:SrcChess2.Book.CreateBookList(System.Collections.Generic.List{System.Int32[]},System.Int32,System.Int32)">
            <summary>
            Create the book entries from a series of move list
            </summary>
            <param name="arrMoveList">      Array of move list</param>
            <param name="iMinMoveCount">    Minimum number of moves a move list must have to be consider</param>
            <param name="iMaxDepth">        Maximum depth of the moves.</param>
            <returns>
            Nb of entries created
            </returns>
        </member>
        <member name="T:SrcChess2.Book.BookEntry">
            <summary>Entry in the book entries</summary>
        </member>
        <member name="F:SrcChess2.Book.BookEntry.Pos">
            <summary>Position of this entry (Start + (End * 256))</summary>
        </member>
        <member name="F:SrcChess2.Book.BookEntry.Size">
            <summary>How many move for this entry at the index</summary>
        </member>
        <member name="F:SrcChess2.Book.BookEntry.Index">
            <summary>Index in the table for the entry</summary>
        </member>
        <member name="F:SrcChess2.Book.BookEntry.Weight">
            <summary>How many child book entries this one has</summary>
        </member>
        <member name="T:SrcChess2.Book.CompareIntArray">
            <summary>Comparer use to sort array of int</summary>
        </member>
        <member name="M:SrcChess2.Book.CompareIntArray.Compare(System.Int32[],System.Int32[])">
            <summary>
            Comparer of Array of int
            </summary>
            <param name="x">    First array</param>
            <param name="y">    Second array</param>
            <returns>
            -1 if x less than y, 1  if x greater than y, 0 if x = y
            </returns>
        </member>
        <member name="T:SrcChess2.frmTestBoardEval">
            <summary>Enter parameters for testing the board evaluation functions</summary>
            <summary>
            frmTestBoardEval
            </summary>
        </member>
        <member name="F:SrcChess2.frmTestBoardEval.m_boardEvalUtil">
            <summary>Board evaluation utility</summary>
        </member>
        <member name="F:SrcChess2.frmTestBoardEval.m_searchMode">
            <summary>Resulting search mode</summary>
        </member>
        <member name="M:SrcChess2.frmTestBoardEval.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmTestBoardEval.#ctor(SrcChess2.BoardEvaluationUtil,SrcChess2.SearchEngine.SearchMode)">
            <summary>
            Class Ctor
            </summary>
            <param name="boardEvalUtil">        Board evaluation utility class</param>
            <param name="searchModeTemplate">   Search mode template</param>
        </member>
        <member name="M:SrcChess2.frmTestBoardEval.gameCount_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Called when game count changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmTestBoardEval.plyCount_ValueChanged(System.Object,System.Windows.RoutedPropertyChangedEventArgs{System.Double})">
            <summary>
            Called when ply count changed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmTestBoardEval.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the ok button is pressed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event parameter</param>
        </member>
        <member name="M:SrcChess2.frmTestBoardEval.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:SrcChess2.frmTestBoardEval.SearchMode">
            <summary>
            Get the search mode
            </summary>
        </member>
        <member name="P:SrcChess2.frmTestBoardEval.GameCount">
            <summary>
            Get the number of games to test
            </summary>
        </member>
        <member name="T:SrcChess2.ColorPicker">
            <summary>
            Color Picker
            </summary>
            <summary>
            ColorPicker
            </summary>
        </member>
        <member name="M:SrcChess2.ColorPicker.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.ColorPicker.loadBitmap(System.Drawing.Bitmap)">
            <summary>
            Load the bitmap
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.ColorPicker.GetColorFromImage(System.Int32,System.Int32)">
            <summary>
            1*1 pixel copy is based on an article by Lee Brimelow    
            http://thewpfblog.com/?p=62
            </summary>
        </member>
        <member name="M:SrcChess2.ColorPicker.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:SrcChess2.ColorPicker.CustomColor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="T:SrcChess2.ColorToSolidColorBrushConverter">
            <summary>
            Converter
            </summary>
        </member>
        <member name="M:SrcChess2.ColorToSolidColorBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.ColorToSolidColorBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Convert back
            </summary>
            <param name="value"></param>
            <param name="targetType"></param>
            <param name="parameter"></param>
            <param name="culture"></param>
            <returns></returns>
        </member>
        <member name="T:SrcChess2.PieceSetStandard">
            <summary>
            Piece Set included in the assembly
            </summary>
        </member>
        <member name="T:SrcChess2.PieceSet">
            <summary>
            Defines a set of chess pieces
            </summary>
        </member>
        <member name="M:SrcChess2.PieceSet.#ctor(System.String)">
            <summary>
            Class Ctor
            </summary>
            <param name="strName">  Piece set Name</param>
        </member>
        <member name="M:SrcChess2.PieceSet.GetChessPieceFromPiece(SrcChess2.ChessBoard.PieceE)">
            <summary>
            Transform a ChessBoard piece into a ChessPiece enum
            </summary>
            <param name="ePiece"></param>
            <returns></returns>
        </member>
        <member name="M:SrcChess2.PieceSet.LoadPiece(SrcChess2.PieceSet.ChessPiece)">
            <summary>
            Load a new piece
            </summary>
            <param name="eChessPiece">  Chess Piece</param>
        </member>
        <member name="P:SrcChess2.PieceSet.Name">
            <summary>Name of the piece set</summary>
        </member>
        <member name="P:SrcChess2.PieceSet.Item(SrcChess2.ChessBoard.PieceE)">
            <summary>
            Gets the specified piece
            </summary>
            <param name="ePiece"></param>
            <returns>
            User control expressing the piece
            </returns>
        </member>
        <member name="T:SrcChess2.PieceSet.ChessPiece">
            <summary>
            List of standard pieces
            </summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.None">
            <summary>No Piece</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.Black_Pawn">
            <summary>Black Pawn</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.Black_Rook">
            <summary>Black Rook</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.Black_Bishop">
            <summary>Black Bishop</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.Black_Knight">
            <summary>Black Knight</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.Black_Queen">
            <summary>Black Queen</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.Black_King">
            <summary>Black King</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.White_Pawn">
            <summary>White Pawn</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.White_Rook">
            <summary>White Rook</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.White_Bishop">
            <summary>White Bishop</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.White_Knight">
            <summary>White Knight</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.White_Queen">
            <summary>White Queen</summary>
        </member>
        <member name="F:SrcChess2.PieceSet.ChessPiece.White_King">
            <summary>White King</summary>
        </member>
        <member name="F:SrcChess2.PieceSetStandard.m_strBasePath">
            <summary>Base Path of the resource</summary>
        </member>
        <member name="M:SrcChess2.PieceSetStandard.#ctor(System.String,System.String)">
            <summary>
            Class Ctor
            </summary>
            <param name="strName">      Piece set Name</param>
            <param name="strBasePath">  Base path in the assembly for this piece set</param>
            
        </member>
        <member name="M:SrcChess2.PieceSetStandard.NameFromChessPiece(SrcChess2.PieceSet.ChessPiece)">
            <summary>
            Gets the pieces name as defined in the assembly
            </summary>
            <param name="ePiece">   Piece</param>
            <returns>
            Piece name
            </returns>
        </member>
        <member name="M:SrcChess2.PieceSetStandard.LoadPiece(SrcChess2.PieceSet.ChessPiece)">
            <summary>
            Load the specified piece from BAML
            </summary>
            <param name="ePiece">       Piece</param>
        </member>
        <member name="M:SrcChess2.PieceSetStandard.LoadPieceSetFromResource">
            <summary>
            Load piece sets from resource
            </summary>
            <returns></returns>
        </member>
        <member name="T:SrcChess2.frmAbout">
            <summary>
            Interaction logic for frmAbout.xaml
            </summary>
            <summary>
            frmAbout
            </summary>
        </member>
        <member name="M:SrcChess2.frmAbout.#ctor">
            <summary>
            Class CTor
            </summary>
        </member>
        <member name="M:SrcChess2.frmAbout.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the Ok button is closed
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.frmAbout.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.MoveItem">
            <summary>
            Move Item
            </summary>
        </member>
        <member name="M:SrcChess2.MoveItem.#ctor(System.String,System.String,System.String)">
            <summary>
            Class Ctor
            </summary>
            <param name="step">     Move step</param>
            <param name="who">      Who did the move</param>
            <param name="move">     Move</param>
        </member>
        <member name="P:SrcChess2.MoveItem.Step">
            <summary>Step</summary>
        </member>
        <member name="P:SrcChess2.MoveItem.Who">
            <summary>Who did the move</summary>
        </member>
        <member name="P:SrcChess2.MoveItem.Move">
            <summary>Move</summary>
        </member>
        <member name="T:SrcChess2.MoveItemList">
            <summary>List of moves</summary>
        </member>
        <member name="T:SrcChess2.MoveViewer">
            <summary>
            User interface displaying the list of moves
            </summary>
            <summary>
            MoveViewer
            </summary>
        </member>
        <member name="F:SrcChess2.MoveViewer.m_chessBoard">
            <summary>Chess Board</summary>
        </member>
        <member name="F:SrcChess2.MoveViewer.m_eDisplayMode">
            <summary>Display Mode</summary>
        </member>
        <member name="F:SrcChess2.MoveViewer.m_bIgnoreChg">
            <summary>true to ignore change</summary>
        </member>
        <member name="M:SrcChess2.MoveViewer.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.MoveViewer.GetMoveDesc(SrcChess2.ChessBoard.MovePosS)">
            <summary>
            Gets the description of a move
            </summary>
            <param name="movePos">  Move to describe</param>
            <returns>
            Move description
            </returns>
        </member>
        <member name="M:SrcChess2.MoveViewer.Redisplay">
            <summary>
            Redisplay all the moves using the current setting
            </summary>
        </member>
        <member name="M:SrcChess2.MoveViewer.AddCurrentMove">
            <summary>
            Add the current move of the board
            </summary>
        </member>
        <member name="M:SrcChess2.MoveViewer.SelectCurrentMove">
            <summary>
            Select the current move
            </summary>
        </member>
        <member name="M:SrcChess2.MoveViewer.Reset(SrcChess2.ChessBoard)">
            <summary>
            Reset the control so it represents the specified chessboard
            </summary>
            <param name="chessBoard">   Chess board. Starting one if null</param>
        </member>
        <member name="M:SrcChess2.MoveViewer.NewMoveDone(System.Int32,System.Int32,System.Int32)">
            <summary>
            Called when a new move has been done
            </summary>
            <param name="iPermCount">   Permutation analyzed. 0 for none. -1 for book</param>
            <param name="iDepth">       Depth of the search, -1 if none.</param>
            <param name="iCacheHit">    Nb of permutation found in the translation table</param>
        </member>
        <member name="M:SrcChess2.MoveViewer.RedoPosChanged">
            <summary>
            Called when position of the redo buffer changed
            </summary>
        </member>
        <member name="M:SrcChess2.MoveViewer.OnNewMoveSelected(SrcChess2.MoveViewer.NewMoveSelectedEventArg)">
            <summary>
            Trigger the NewMoveSelected argument
            </summary>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.MoveViewer.listViewMoveList_SelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            Called when the user select a move
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event arguments</param>
        </member>
        <member name="M:SrcChess2.MoveViewer.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="E:SrcChess2.MoveViewer.NewMoveSelected">
            <summary>Called when a move has been selected by the control</summary>
        </member>
        <member name="P:SrcChess2.MoveViewer.MoveList">
            <summary>List of moves</summary>
        </member>
        <member name="P:SrcChess2.MoveViewer.DisplayMode">
            <summary>
            Display Mode (Position or PGN)
            </summary>
        </member>
        <member name="T:SrcChess2.MoveViewer.DisplayModeE">
            <summary>How the move are displayed: Move position (E2-E4) or PGN (e4)</summary>
        </member>
        <member name="F:SrcChess2.MoveViewer.DisplayModeE.MovePos">
            <summary>Display move using starting-ending position</summary>
        </member>
        <member name="F:SrcChess2.MoveViewer.DisplayModeE.PGN">
            <summary>Use PGN notation</summary>
        </member>
        <member name="T:SrcChess2.MoveViewer.NewMoveSelectedEventArg">
            <summary>Argument for the NewMoveSelected event</summary>
        </member>
        <member name="F:SrcChess2.MoveViewer.NewMoveSelectedEventArg.NewIndex">
            <summary>New selected index in the list</summary>
        </member>
        <member name="M:SrcChess2.MoveViewer.NewMoveSelectedEventArg.#ctor(System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="iNewIndex">    New index</param>
        </member>
        <member name="T:SrcChess2.MoveViewer.NewMoveSelectedHandler">
            <summary>Delegates for the NewMoveSelected event</summary>
        </member>
        <member name="T:SrcChess2.SearchEngineAlphaBeta">
            <summary>Base class for Search Engine</summary>
        </member>
        <member name="M:SrcChess2.SearchEngineAlphaBeta.#ctor(SrcChess2.SearchEngine.ITrace,System.Random,System.Random)">
            <summary>
            Class constructor
            </summary>
            <param name="trace">    Trace object or null</param>
            <param name="rnd">      Random object</param>
            <param name="rndRep">   Repetitive random object</param>
        </member>
        <member name="M:SrcChess2.SearchEngineAlphaBeta.AlphaBeta(SrcChess2.ChessBoard,SrcChess2.ChessBoard.PlayerColorE,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo)">
            <summary>
            Alpha Beta pruning function.
            </summary>
            <param name="chessBoard">       Chess board</param>
            <param name="ePlayerColor">     Color doing the move</param>
            <param name="iDepth">           Actual search depth</param>
            <param name="iAlpha">           Alpha limit</param>
            <param name="iBeta">            Beta limit</param>
            <param name="iWhiteMoveCount">  Number of moves white can do</param>
            <param name="iBlackMoveCount">  Number of moves black can do</param>
            <param name="abInfo">           Supplemental information</param>
            <returns>
            Points to give for this move or Int32.MinValue for timed out
            </returns>
        </member>
        <member name="M:SrcChess2.SearchEngineAlphaBeta.FindBestMoveUsingAlphaBetaAtDepth(SrcChess2.ChessBoard,SrcChess2.SearchEngine.SearchMode,SrcChess2.ChessBoard.PlayerColorE,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS},SrcChess2.ChessBoard.PosInfoS,SrcChess2.ChessBoard.PosInfoS,System.Int32,System.Int32,System.Int32,System.Int32,SrcChess2.TransTable,System.DateTime,System.Int32@,System.Int32@,System.Boolean@,System.Int32[]@)">
            <summary>
            Find the best move for a player using alpha-beta for a given depth
            </summary>
            <param name="chessBoard">       Chess board</param>
            <param name="searchMode">       Search mode</param>
            <param name="ePlayerColor">     Color doing the move</param>
            <param name="moveList">         List of move to try</param>
            <param name="posInfoWhite">     Information about pieces attacks for the white</param>
            <param name="posInfoBlack">     Information about pieces attacks for the black</param>
            <param name="iTotalMoveCount">  Total list of moves</param>
            <param name="iDepth">           Maximum depth</param>
            <param name="iAlpha">           Alpha bound</param>
            <param name="iBeta">            Beta bound</param>
            <param name="transTable">       Transposition table or null if not using one</param>
            <param name="dtTimeOut">        Time limit (DateTime.MaxValue for no time limit)</param>
            <param name="iPermCount">       Total permutation evaluated</param>
            <param name="iBestMoveIndex">   Index of the best move</param>
            <param name="bTimeOut">         Return true if time out</param>
            <param name="arrPoints">        Returns point of each move in move list</param>
            <returns>
            Points
            </returns>
        </member>
        <member name="M:SrcChess2.SearchEngineAlphaBeta.FindBestMoveUsingAlphaBetaAsync(SrcChess2.ChessBoard,SrcChess2.SearchEngine.SearchMode,SrcChess2.ChessBoard.PlayerColorE,System.Int32,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS},SrcChess2.ChessBoard.PosInfoS,SrcChess2.ChessBoard.PosInfoS,System.Int32,System.Int32,System.Int32)">
            <summary>
            Find the best move for a player using alpha-beta in a secondary thread
            </summary>
            <param name="chessBoard">       Chess board</param>
            <param name="searchMode">       Search mode</param>
            <param name="ePlayerColor">     Color doing the move</param>
            <param name="iThreadId">        Thread Id (0-n)</param>
            <param name="moveList">         List of move to try</param>
            <param name="posInfoWhite">     Information about pieces attacks for the white</param>
            <param name="posInfoBlack">     Information about pieces attacks for the black</param>
            <param name="iTotalMoveCount">  Total number of moves</param>
            <param name="iAlpha">           Alpha bound</param>
            <param name="iBeta">            Beta bound</param>
            <returns>
            Points
            </returns>
        </member>
        <member name="M:SrcChess2.SearchEngineAlphaBeta.FindBestMove(SrcChess2.ChessBoard,SrcChess2.SearchEngine.SearchMode,SrcChess2.ChessBoard.PlayerColorE,System.Collections.Generic.List{SrcChess2.ChessBoard.MovePosS},System.Int32[],SrcChess2.ChessBoard.PosInfoS,SrcChess2.ChessBoard.MovePosS@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Find the best move for a player using alpha-beta
            </summary>
            <param name="chessBoard">       Chess board</param>
            <param name="searchMode">       Search mode</param>
            <param name="ePlayerColor">     Color doing the move</param>
            <param name="moveList">         Move list</param>
            <param name="arrIndex">         Order of evaluation of the moves</param>
            <param name="posInfo">          Information about pieces attacks</param>
            <param name="moveBest">         Best move found</param>
            <param name="iPermCount">       Total permutation evaluated</param>
            <param name="iCacheHit">        Number of moves found in the translation table cache</param>
            <param name="iMaxDepth">        Maximum depth to use</param>
            <returns>
            true if a move has been found
            </returns>
        </member>
        <member name="T:SrcChess2.SearchEngineAlphaBeta.AlphaBetaResult">
            <summary>Result from AlphaBeta calling</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaResult.movePosBest">
            <summary>Best move found</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaResult.iPts">
            <summary>Point given for this move</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaResult.iPermCount">
            <summary>Number of tried permutation</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaResult.iMaxDepth">
            <summary>Maximum search depth</summary>
        </member>
        <member name="T:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo">
            <summary>Private class use to pass info at AlphaBeta decreasing the stack space use</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo.m_transTable">
            <summary>Transposition table</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo.m_dtTimeOut">
            <summary>Time before timeout. Use for iterative</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo.m_iPermCount">
            <summary>Number of board evaluated</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo.m_arrMovePos">
            <summary>Array of move position per depth</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo.m_iMaxDepth">
            <summary>Maximum depth to search</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo.m_searchMode">
            <summary>Search mode</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo.m_posInfoWhite">
            <summary>Information about pieces attacks</summary>
        </member>
        <member name="F:SrcChess2.SearchEngineAlphaBeta.AlphaBetaInfo.m_posInfoBlack">
            <summary>Information about pieces attacks</summary>
        </member>
        <member name="T:SrcChess2.frmCreatePgnGame">
            <summary>
            Interaction logic for frmCreatePgnGame.xaml
            </summary>
            <summary>
            frmCreatePgnGame
            </summary>
        </member>
        <member name="M:SrcChess2.frmCreatePgnGame.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.frmCreatePgnGame.butOk_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Accept the content of the form
            </summary>
            <param name="sender">   Sender object</param>
            <param name="e">        Event argument</param>
        </member>
        <member name="M:SrcChess2.frmCreatePgnGame.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.MoveList">
            <summary>Array of move list</summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.StartingChessBoard">
            <summary>Board starting position</summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.StartingColor">
            <summary>Starting Color</summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.WhitePlayerName">
            <summary>Name of the player playing white</summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.BlackPlayerName">
            <summary>Name of the player playing black</summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.WhitePlayerType">
            <summary>Player type (computer or human)</summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.BlackPlayerType">
            <summary>Player type (computer or human)</summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.WhiteTimer">
            <summary>White player playing time</summary>
        </member>
        <member name="P:SrcChess2.frmCreatePgnGame.BlackTimer">
            <summary>Black player playing time</summary>
        </member>
        <member name="T:SrcChess2.ChessToolBar">
            <summary>
            Toolbar for the Chess Program
            </summary>
            <summary>
            ChessToolBar
            </summary>
        </member>
        <member name="M:SrcChess2.ChessToolBar.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.ChessToolBar.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:SrcChess2.ToolBarButton">
            <summary>
            Defines a toolbar button
            </summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.ImageProperty">
            <summary>Image dependency property</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.DisabledImageProperty">
            <summary>Image Disabled dependency property</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.FlipProperty">
            <summary>Flip dependency property</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.TextProperty">
            <summary>Image dependency property</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.DisplayStyleProperty">
            <summary>DisplayStyle dependency property</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.m_imageCtrl">
            <summary>Inner Image control</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.m_textCtrl">
            <summary>Inner Text control</summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.#cctor">
            <summary>
            Class ctor
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.ImageChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when Image property changed
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.DisabledImageChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when Disabled Image property changed
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.FlipChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when Flip property changed
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.TextChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when Text property changed
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.DisplayStyleChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when DisplayStyle property changed
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.SetDisplayStyle(System.Windows.DependencyObject,SrcChess2.ToolBarButton.DisplayStyleE)">
            <summary>
            Set the Display Style
            </summary>
            <param name="element">      Dependency element</param>
            <param name="eDisplayStyle">Display Style</param>
        </member>
        <member name="M:SrcChess2.ToolBarButton.GetDisplayStyle(System.Windows.DependencyObject)">
            <summary>
            Get the full name of the field attached to a column
            </summary>
            <param name="element">  Dependency element</param>
            <returns>
            Field full name
            </returns>
        </member>
        <member name="M:SrcChess2.ToolBarButton.IsEnabledChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when IsEnabled property changed
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.SetImage(System.Boolean)">
            <summary>
            Set the source image depending the enabled state
            </summary>
            <param name="bFlip">    true if flipped</param>
        </member>
        <member name="M:SrcChess2.ToolBarButton.BuildInnerButton">
            <summary>
            Builds the inner controls to make the button
            </summary>
        </member>
        <member name="M:SrcChess2.ToolBarButton.UpdateInnerButton">
            <summary>
            Updates the inner controls of the button
            </summary>
        </member>
        <member name="P:SrcChess2.ToolBarButton.Image">
            <summary>
            Image displayed to the button
            </summary>
        </member>
        <member name="P:SrcChess2.ToolBarButton.DisabledImage">
            <summary>
            Disabled Image displayed to the button
            </summary>
        </member>
        <member name="P:SrcChess2.ToolBarButton.Flip">
            <summary>
            Flip the image horizontally
            </summary>
        </member>
        <member name="P:SrcChess2.ToolBarButton.Text">
            <summary>
            Text displayed in button
            </summary>
        </member>
        <member name="P:SrcChess2.ToolBarButton.DisplayStyle">
            <summary>
            Display Style applied to the button
            </summary>
        </member>
        <member name="T:SrcChess2.ToolBarButton.DisplayStyleE">
            <summary>Display Style applied to the Toolbarbutton</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.DisplayStyleE.Image">
            <summary>Image only displayed</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.DisplayStyleE.Text">
            <summary>Text only displayed</summary>
        </member>
        <member name="F:SrcChess2.ToolBarButton.DisplayStyleE.ImageAndText">
            <summary>Image and Text displayed</summary>
        </member>
        <member name="T:SrcChess2.TransEntryTypeE">
            <summary>Type of transposition entry</summary>
        </member>
        <member name="F:SrcChess2.TransEntryTypeE.Exact">
            <summary>Exact move value</summary>
        </member>
        <member name="F:SrcChess2.TransEntryTypeE.Alpha">
            <summary>Alpha cut off value</summary>
        </member>
        <member name="F:SrcChess2.TransEntryTypeE.Beta">
            <summary>Beta cut off value</summary>
        </member>
        <member name="T:SrcChess2.TransTable">
            <summary>
            Implements a transposition table. Transposition table is used to cache already computed board 
            </summary>
        </member>
        <member name="F:SrcChess2.TransTable.s_arrTransTable">
            <summary>Array of static transposition table</summary>
        </member>
        <member name="F:SrcChess2.TransTable.s_iTransTableSize">
            <summary>Size of the translation tables</summary>
        </member>
        <member name="F:SrcChess2.TransTable.m_arrTransEntry">
            <summary>Hashlist of entries</summary>
        </member>
        <member name="F:SrcChess2.TransTable.m_iCacheHit">
            <summary>Number of cache hit</summary>
        </member>
        <member name="F:SrcChess2.TransTable.m_iGen">
            <summary>Current generation</summary>
        </member>
        <member name="M:SrcChess2.TransTable.#cctor">
            <summary>
            Static constructor. Use to create the random value for each case of the board.
            </summary>
        </member>
        <member name="M:SrcChess2.TransTable.GetTransTable(System.Int32)">
            <summary>
            Gets one of the static translation table
            </summary>
            <param name="iIndex">           Index of the table (0..ProcessorCount-1)</param>
            <returns>
            Translation table
            </returns>
        </member>
        <member name="M:SrcChess2.TransTable.#ctor(System.Int32)">
            <summary>
            Class constructor
            </summary>
            <param name="iTransTableSize">  Size of the transposition table.</param>
        </member>
        <member name="M:SrcChess2.TransTable.RecordEntry(System.Int64,SrcChess2.ChessBoard.BoardStateMaskE,System.Int32,System.Int32,SrcChess2.TransEntryTypeE)">
            <summary>
            Record a new entry in the table
            </summary>
            <param name="i64ZobristKey">    Zobrist key. Probably unique for this board position.</param>
            <param name="eExtraInfo">       Extra information about the board not contains in the Zobrist key</param>
            <param name="iDepth">           Current depth (reverse)</param>
            <param name="iValue">           Board evaluation</param>
            <param name="eType">            Type of the entry</param>
        </member>
        <member name="M:SrcChess2.TransTable.ProbeEntry(System.Int64,SrcChess2.ChessBoard.BoardStateMaskE,System.Int32,System.Int32,System.Int32)">
            <summary>
            Try to find if the current board has already been evaluated
            </summary>
            <param name="i64ZobristKey">    Zobrist key. Probably unique for this board position.</param>
            <param name="eExtraInfo">       Extra information about the board not contains in the Zobrist key</param>
            <param name="iDepth">           Current depth (reverse)</param>
            <param name="iAlpha">           Alpha cut off</param>
            <param name="iBeta">            Beta cut off</param>
            <returns>
            Int32.MaxValue if no valid value found, else value of the board.
            </returns>
        </member>
        <member name="M:SrcChess2.TransTable.Reset">
            <summary>
            Reset the cache
            </summary>
        </member>
        <member name="P:SrcChess2.TransTable.TranslationTableSize">
            <summary>
            Size of the translation table
            </summary>
        </member>
        <member name="P:SrcChess2.TransTable.CacheHit">
            <summary>
            Number of cache hit
            </summary>
        </member>
        <member name="T:SrcChess2.TransTable.TransEntry">
            <summary>Entry in the transposition table</summary>
        </member>
        <member name="T:SrcChess2.CustomColorPicker">
            <summary>
            Interaction logic for CustomColorPicker.xaml
            </summary>
            <summary>
            CustomColorPicker
            </summary>
        </member>
        <member name="M:SrcChess2.CustomColorPicker.#ctor">
            <summary>
            Class Ctor
            </summary>
        </member>
        <member name="M:SrcChess2.CustomColorPicker.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="E:SrcChess2.CustomColorPicker.SelectedColorChanged">
            <summary>
            SelectedColor event
            </summary>
        </member>
        <member name="P:SrcChess2.CustomColorPicker.HexValue">
            <summary>
            Color in Hexadecimal
            </summary>
        </member>
        <member name="P:SrcChess2.CustomColorPicker.SelectedColor">
            <summary>
            Selected Color
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
